"
I am an asset model that is usually generated by an external 3D design application. Unlike a simple model, I represent a template for a subset of a scene graph.
"
Class {
	#name : #WDSSceneAssetModel,
	#superclass : #WDCAbstractModel,
	#instVars : [
		'mainScene',
		'scenes'
	],
	#category : #'WodenEngine-Scene-Asset'
}

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> createViewer [
	| sceneModel camera hasLights sunLight skyTexture |
	sceneModel := WDASampleSceneModel new.
	sceneModel
		scene: mainScene.
	mainScene backgroundColor: Color gray.
	mainScene initializeWithEngine: sceneModel engine.
	
	"Try to find a camera."
	hasLights := false.
	mainScene allChildrenDo: [ :node |
		hasLights := hasLights or: [node isLightSource].
		node isCamera ifTrue: [
			node isNotControlledByTheUser: true.
			sceneModel camera: node
		]
	].

	"If not camera is found, then we have to create a camera for the scene."
	sceneModel camera ifNil: [ 
		camera := WDSGCamera new.
		
		mainScene add: camera.
		sceneModel camera: camera.
	].

	hasLights ifFalse: [
		"Add a light"
		sunLight := WDSGLightSource new.
		sunLight directional; castShadows: false.
		sunLight state
				intensity: (WMVector4F x: 1.0 y: 1.0 z: 0.8) normalized * 0.6.
		sunLight transform
			rotateDegreesOnX: -35.
		
		mainScene add: sunLight.

		mainScene ambientLighting: WMVector4F ones.
		
		skyTexture := WDASceneExamples proceduralSkySunDirection: (sunLight transform
				transformVector3:(WMVector3F z: 1.0)
			).
		skyTexture := skyTexture asSRGBTextureFor: sceneModel engine.
		mainScene lightingProbe: (sceneModel engine resourceCache computeEnvironmentLightProbeFromCubeTexture: skyTexture).
				
	].

	^ sceneModel
]

{ #category : #accessing }
WDSSceneAssetModel >> mainScene [
	^ mainScene
]

{ #category : #accessing }
WDSSceneAssetModel >> mainScene: anObject [
	mainScene := anObject
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> openViewer [
	^ self createViewer openWith: WDAFPSSceneView allowingVR.
]

{ #category : #accessing }
WDSSceneAssetModel >> scenes [
	^ scenes
]

{ #category : #accessing }
WDSSceneAssetModel >> scenes: anObject [
	scenes := anObject
]
