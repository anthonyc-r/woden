"
I am an asset model that is usually generated by an external 3D design application. Unlike a simple model, I represent a template for a subset of a scene graph.
"
Class {
	#name : #WDSSceneAssetModel,
	#superclass : #WDCAbstractModel,
	#instVars : [
		'mainScene',
		'scenes',
		'sceneNodeNameDictionary',
		'animations',
		'animationDictionary'
	],
	#category : #'WodenEngine-Scene-Asset'
}

{ #category : #adding }
WDSSceneAssetModel >> addAnimation: anAnimation [
	animations add: anAnimation.
	anAnimation name ifNotNil: [
		animationDictionary at: anAnimation name ifAbsentPut: [ anAnimation ]
	]
]

{ #category : #accessing }
WDSSceneAssetModel >> animations [
	^ animations
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> createViewer [
	^ WDA3DModelViewerModel new
		modelAsset: self;
		newScene;
		addSceneModel: mainScene;
		yourself
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> ensureValidNameDictionaries [
	sceneNodeNameDictionary ifNotNil: [ ^ self ].

	sceneNodeNameDictionary := Dictionary new.
	scenes do: [ :scene |
		scene allChildrenDo: [ :node |
			node name ifNotNil: [
				sceneNodeNameDictionary at: node name put: node
			].
		]
	].

]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> extractConvexCollisionShapesFrom: node withTransform: nodeGlobalTransform into: convexComponents [
	node canBeRendered ifTrue: [ 
		node renderable extractConvexCollisionShapesWithTransform: nodeGlobalTransform into: convexComponents
	].

	node childrenDo: [ :child |
		self extractConvexCollisionShapesFrom: child
			withTransform: (nodeGlobalTransform transformTransform: child transform)
			into: convexComponents
	].

]

{ #category : #accessing }
WDSSceneAssetModel >> getAnimationNamed: animationName [
	^ animationDictionary at: animationName
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> getCollisionShapeForConvexCollisionTreeNamed: collisionTreeNodeName [
	| treeRoot convexComponents |
	self ensureValidNameDictionaries.
	treeRoot := sceneNodeNameDictionary at: collisionTreeNodeName.
	convexComponents := OrderedCollection new.
	self extractConvexCollisionShapesFrom: treeRoot withTransform: ReversibleAffineTransform3dF32 identity into: convexComponents.
	convexComponents ifEmpty: [ ^ nil ].
	
	self flag: 'TODO: Add a cache for this collision shapes.'.
	^ WDPhyCompoundCollisionShape new components: convexComponents
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> getNodeBoundingBox: childNodeName relativeToNode: parentNodeName [
	| childNode parentNode |
	self ensureValidNameDictionaries.
	childNode := sceneNodeNameDictionary at: childNodeName.
	parentNode := sceneNodeNameDictionary at: parentNodeName.
	^ childNode globalOrientedBoundingBox transformedWith: (parentNode globalTransform inverseTransformTransform: childNode globalTransform)
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> getNodePosition: childNodeName relativeToNode: parentNodeName [
	| childNode parentNode |
	self ensureValidNameDictionaries.
	childNode := sceneNodeNameDictionary at: childNodeName.
	parentNode := sceneNodeNameDictionary at: parentNodeName.
	^ childNode globalTransform translation - parentNode globalTransform translation
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> getNodeTransform: childNodeName relativeToNode: parentNodeName [
	| childNode parentNode |
	self ensureValidNameDictionaries.
	childNode := sceneNodeNameDictionary at: childNodeName.
	parentNode := sceneNodeNameDictionary at: parentNodeName.
	^ parentNode globalTransform inverseTransformTransform: childNode globalTransform
]

{ #category : #initialization }
WDSSceneAssetModel >> initialize [
	super initialize.
	animations := OrderedCollection new.
	animationDictionary := Dictionary new.
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> instanceSceneNodeNamed: sceneNodeName [
	^ self instanceSceneNodeNamed: sceneNodeName ifAbsent: [self error: 'Requested scene node is not available in the model.']
]

{ #category : #'as yet unclassified' }
WDSSceneAssetModel >> instanceSceneNodeNamed: sceneNodeName ifAbsent: aBlock [
	self ensureValidNameDictionaries.
	^ (sceneNodeNameDictionary at: sceneNodeName ifAbsent: [ aBlock ]) copy
		transform: ReversibleAffineTransform3dF32 identity;
		yourself
]

{ #category : #accessing }
WDSSceneAssetModel >> mainScene [
	^ mainScene
]

{ #category : #accessing }
WDSSceneAssetModel >> mainScene: anObject [
	mainScene := anObject
]

{ #category : #accessing }
WDSSceneAssetModel >> scenes [
	^ scenes
]

{ #category : #accessing }
WDSSceneAssetModel >> scenes: anObject [
	scenes := anObject
]
