import ambientOcclusionShaderSignature;
import compute.stage;
import procedural.noise;

uniform(binding=CameraState.ObjectState) CameraState
{
    inverseViewMatrix: float4x4;
    viewMatrix: float4x4;

    projectionMatrix: float4x4;
    inverseProjectionMatrix: float4x4;

    screenSize: float2;
    inverseScreenSize: float2;

    currentTime: float;
}

uniform(binding = ComputeBuffers.DepthBuffer) depthTexture : texture2D;
uniform(binding = ComputeBuffers.Destination, format = r8, writeonly) ssaoImage : image2D;

constant SamplingDistributionSize : int = 32;
constant SamplingDistribution : float3[32] = {
    { -0.0826997384428978f, 0.06553447246551514f, -0.5620816349983215f },
    { 0.8693857789039612f, -0.23299583792686462f, 0.03883274272084236f },
    { -0.23316869139671326f, -0.8663155436515808f, -0.16502805054187775f },
    { 0.37354543805122375f, 0.17795328795909882f, 0.8608729839324951f },
    { 0.30783793330192566f, -0.16800127923488617f, 0.40238118171691895f },
    { 0.44532081484794617f, 0.5067116618156433f, 0.3030371367931366f },
    { -0.45458006858825684f, -0.1271771937608719f, 0.5329895615577698f },
    { -0.044536471366882324f, -0.5244511365890503f, -0.4501863121986389f },
    { -0.8525018692016602f, 0.0014141895808279514f, -0.23171570897102356f },
    { -0.4458363950252533f, 0.827634871006012f, 0.05949478596448898f },
    { 0.523028552532196f, 0.5404090881347656f, 0.6556345820426941f },
    { 0.736494243144989f, 0.25908684730529785f, 0.47244903445243835f },
    { -0.5336102247238159f, -0.38735634088516235f, -0.2979694902896881f },
    { 0.026547404006123543f, 0.18222716450691223f, 0.6919631361961365f },
    { -0.17583845555782318f, 0.6830213069915771f, -0.4613654613494873f },
    { -0.1692107617855072f, 0.0746079534292221f, -0.06416526436805725f },
    { 0.24969857931137085f, 0.6840792298316956f, -0.6804649829864502f },
    { -0.6993298530578613f, 0.3626924157142639f, -0.22837059199810028f },
    { 0.17437323927879333f, 0.6911513209342957f, 0.1802172213792801f },
    { 0.12979735434055328f, -0.4957471787929535f, -0.022970901802182198f },
    { -0.600485622882843f, -0.36150065064430237f, 0.25853830575942993f },
    { -0.746575653553009f, 0.3025074899196625f, 0.24326805770397186f },
    { 0.606145977973938f, -0.504316508769989f, -0.04713639244437218f },
    { 0.2007874697446823f, 0.6351229548454285f, 0.5116870403289795f },
    { -0.07551003992557526f, 0.9027348756790161f, 0.26547738909721375f },
    { -0.07335453480482101f, -0.8696122765541077f, 0.42684462666511536f },
    { -0.022113680839538574f, 0.3353581428527832f, 0.3640982508659363f },
    { 0.6132998466491699f, -0.2696838676929474f, -0.5769621133804321f },
    { 0.5467040538787842f, 0.4546699821949005f, -0.36164483428001404f },
    { -0.5894762277603149f, 0.6728397607803345f, 0.41784122586250305f },
    { 0.20202021300792694f, -0.6462392807006836f, 0.6567094326019287f },
    { 0.2668597996234894f, -0.8871186971664429f, 0.19643327593803406f },
};

/*constant SamplingDistributionSize : int = 16;
constant SamplingDistribution : float3[16] = {
    { -0.0826997384428978f, 0.06553447246551514f, -0.5620816349983215f },
    { 0.8693857789039612f, -0.23299583792686462f, 0.03883274272084236f },
    { -0.23316869139671326f, -0.8663155436515808f, -0.16502805054187775f },
    { 0.37354543805122375f, 0.17795328795909882f, 0.8608729839324951f },
    { 0.30783793330192566f, -0.16800127923488617f, 0.40238118171691895f },
    { 0.44532081484794617f, 0.5067116618156433f, 0.3030371367931366f },
    { -0.45458006858825684f, -0.1271771937608719f, 0.5329895615577698f },
    { -0.044536471366882324f, -0.5244511365890503f, -0.4501863121986389f },
    { -0.8525018692016602f, 0.0014141895808279514f, -0.23171570897102356f },
    { -0.4458363950252533f, 0.827634871006012f, 0.05949478596448898f },
    { 0.736494243144989f, 0.25908684730529785f, 0.47244903445243835f },
    { -0.5336102247238159f, -0.38735634088516235f, -0.2979694902896881f },
    { -0.17583845555782318f, 0.6830213069915771f, -0.4613654613494873f },
    { -0.1692107617855072f, 0.0746079534292221f, -0.06416526436805725f },
    { 0.24969857931137085f, 0.6840792298316956f, -0.6804649829864502f },
    { 0.12979735434055328f, -0.4957471787929535f, -0.022970901802182198f },
};*/

function sampleAmbientOcclusionAt(position: float3) -> float
{
    let projectedPosition = CameraState.projectionMatrix * float4(position, 1.0f);
    let samplePoint = projectedPosition.xyz / projectedPosition.w;
    let sampleDepth = aoDepthSampler.sampleLod(depthTexture, samplePoint.xy*0.5f + 0.5f, 0.0f).r;

    return sampleDepth - 0.00001f < samplePoint.z ? 0.0f : 1.0f;
}

function rotate(s: float, v: float3) -> float3
{
	let c = sqrt(1.0f - s*s);
	return float3(
        c*v.x + s*v.y,
	    -s*v.x + c*v.y,
        v.z);
}

code_block(compute, localSizeX=32, localSizeY=16) main
{
	let st = int2(ComputeStage.globalInvocationID.xy);
	let size = getImageSize(ssaoImage);
	let inverseSize = 1.0f / float2(size);
    let uv = float2(st)*inverseSize;

    // Compute the eye position, in view space.
    let eyeDepth = aoDepthSampler.sampleLod(depthTexture, uv, 0.0f).r;
    let screenPosition = float4(uv*2.0f - 1.0f, eyeDepth, 1.0f);

    let eyePosition4 = CameraState.inverseProjectionMatrix *screenPosition;
    let eyePosition = eyePosition4.xyz/eyePosition4.w;

	let outSampleCount = 0.0f;
    let noise = signedRandomNoise(uv);

    for(let i = 0; i < SamplingDistributionSize; i += 1)
    {
        let delta = rotate(noise, SamplingDistribution[i]*0.05f);
        outSampleCount += sampleAmbientOcclusionAt(eyePosition + delta);
    }


	let value = 1.0f - outSampleCount / float(SamplingDistributionSize);
	imageWrite(ssaoImage, st, float4(value, 0.0f, 0.0f, 0.0f));
}
