import rendering.shaderSignature;
import rendering.environment;
import lighting.functions;

import fragment.stage; // For SSAO
import math.constants;
import math.functions;

uniform(binding = LightingState.SpotShadowMaps) spotShadowMaps : depthTexture2DArray;
uniform(binding = LightingState.PointShadowMaps) pointShadowMaps : depthTextureCubeArray;
uniform(binding = LightingState.ScreenSpaceAmbientOcclusion) screenSpaceAmbientOcclusion : texture2D;
uniform(binding = LightingState.SpecularBRDFLut) imageBasedLightingBRDFLut : texture2D;
uniform(binding = LightingState.DiffuseIrradianceMap) diffuseIrradianceMap : textureCube;
uniform(binding = LightingState.SpecularIrradianceMap) specularIrradianceMap : textureCube;

function specularDistribution(alpha: float, cosTheta: float) -> float
{
	//return blinnPhongSpecularDistribution(alpha, cosTheta);
	return ggxSpecularDistribution(alpha, cosTheta);
}

function cookTorranceMasking(alpha: float, NdotL: float, NdotV: float) -> float
{
	//return cookTorranceImplicitMasking(alpha, NdotL, NdotV);
	//return cookTorranceSmithSchlickBeckmannMasking(alpha, NdotL, NdotV);
	return cookTorranceSmithSchlickGGXMasking(alpha, NdotL, NdotV);
}

function projectShadowPosition(shadowPoint: float4, shadowMapLayer: float) -> float4
{
    let projectedShadowPoint = float3(shadowPoint.xyz / shadowPoint.w);
    let shadowCoord = float3(projectedShadowPoint.xy, shadowMapLayer);

    return float4(shadowCoord, projectedShadowPoint.z);
}

function sampleShadowMapWithDisplacement(shadowPoint: float3, depthReference: float, displacement: float2) -> float
{
    return shadowSampler.sampleWithDepthReference(spotShadowMaps,
        shadowPoint + float3(displacement*GlobalLightingState.shadowMapInverseExtent, 0.0f),
        depthReference);
}

function sampleScreenSpaceAmbientOcclusion() -> float
{
    let uv = FragmentStage.fragCoord.xy * CameraState.inverseScreenSize;
    return albedoSampler.sample(screenSpaceAmbientOcclusion, uv).x;
}

function computeShadowFactorFor(shadowPoint: float3, depthReference: float) -> float
{
    return
        (sampleShadowMapWithDisplacement(shadowPoint, depthReference, float2(-0.5f, -0.5f)) +
        sampleShadowMapWithDisplacement(shadowPoint, depthReference, float2(-0.5f, 0.5f)) +
        sampleShadowMapWithDisplacement(shadowPoint, depthReference, float2(0.5f, -0.5f)) +
        sampleShadowMapWithDisplacement(shadowPoint, depthReference, float2(0.5f, 0.5f))
        ) * 0.25f;
}

function computeLightFalloff(distance: float, radius: float) -> float
{
	let a = distance/radius;
	let a2 = a*a;
	let a4 = a2*a2;
	let num = saturate(1.0f - a4);
	return num*num / (distance*distance + 1.0f);
}

code_block forwardLightingModel
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
	in emission: float4;
    in position: float3;
    in albedo: float3;
    in Cdiff: float3;
	in translucencyFactor: float;
    in roughness: float;
	in occlusion: float;
    in F0: float3;
    out color: float4;

    using GlobalLightingState;

	let diff = Cdiff*PiReciprocal;
    let accumulatedColor = float3(0.0f, 0.0f, 0.0f);

	let alpha = roughness*roughness;

	// Remap the roughness factor for direct lighting to avoid GGX numerical explosion.
	let directRoughness = mix(0.05f, 1.0f, roughness);
	let directAlpha = directRoughness*directRoughness;

    // Compute the hemisphere lighting factor.
    let hemiFactor = dot(normal, sunDirection)*0.5f + 0.5f;
    let hemiLightingFactor = mix(groundLighting.rgb, skyLighting.rgb, hemiFactor);

	let NdotV = saturate(dot(normal, viewVector));

	// Add the lighting cube.
    let R = reflect(-viewVector, normal);
    let worldN = (CameraState.inverseViewMatrix * float4(normal, 0.0f)).xyz;
    let worldR = (CameraState.inverseViewMatrix * float4(R, 0.0f)).xyz;

	let reflectionF0 = fresnelSchlickRoughness(F0, NdotV, roughness);
	
    let diffuseLightProbeSample = cubeMapSampler.sampleLod(diffuseIrradianceMap, worldN, 0.0f).rgb;
	let specularLightProbeLevel = float(getTextureLevelCount(specularIrradianceMap)) * roughness;
    let specularLightProbeSample = cubeMapSampler.sampleLod(specularIrradianceMap, worldR, specularLightProbeLevel).rgb;
	let ambientReflectionFactors = brdfLutSampler.sample(imageBasedLightingBRDFLut, float2(NdotV, roughness));
	let translucencyWithFresnel = fresnelSchlick(translucencyFactor, NdotV);

	accumulatedColor += hemiLightingFactor*(diffuseLightProbeSample*diff +
		specularLightProbeSample*(F0*ambientReflectionFactors.x + ambientReflectionFactors.y));

	// Apply ambient occlusion.
	accumulatedColor *= occlusion*sampleScreenSpaceAmbientOcclusion();
	
	accumulatedColor += emission.rgb;

    // Add the indirect lighting.
    for(let i = 0; i < numberOfLights; i += 1)
    {
        using lightSource = lightSources[i];
        let L = lightSource.position.xyz;
		let dist = 0.0f;
		if(lightSource.position.w != 0.0f)
		{
		 	L -= position;
			dist = length(L);
			L = L / dist;
		}

        let NdotL = max(dot(normal, L), 0.0f);
        if(NdotL == 0.0f)
            continue;

        // Are we inside the spot light cone?
        let spotCos = 1.0f;
        if(lightSource.outerCosCutoff > -1.0f) // For no spot lights.
            spotCos = dot(L, lightSource.spotDirection);

        if(spotCos < lightSource.outerCosCutoff)
           continue;

		let shadowFactor = 1.0f;
		if(lightSource.shadowMapLayer >= 0.0f)
		{
            let cameraShadowPosition = float4(position + surfaceNormal*0.1f, 1.0f);
            let cascadeSplitOffsets = lightSource.cascadeSplitOffsets;
            let cascadeDistance = dot(lightSource.cascadeFrustumPlane.xyz, cameraShadowPosition.xyz) + lightSource.cascadeFrustumPlane.w;

            if(lightSource.position.w != 0.0f || cascadeDistance < cascadeSplitOffsets.y)
            {
                let shadowPosition = lightSource.shadowMapTransform * cameraShadowPosition;
                let projectedShadowPoint = projectShadowPosition(shadowPosition, lightSource.shadowMapLayer);
			    shadowFactor = computeShadowFactorFor(projectedShadowPoint.xyz, projectedShadowPoint.w);
            }
            else if(cascadeDistance < cascadeSplitOffsets.z)
            {
                let shadowPosition = lightSource.shadowMapTransform2 * cameraShadowPosition;
                let projectedShadowPoint = projectShadowPosition(shadowPosition, lightSource.shadowMapLayer + 1.0f);
                shadowFactor = computeShadowFactorFor(projectedShadowPoint.xyz, projectedShadowPoint.w);
            }
            else
            {
                let shadowPosition = lightSource.shadowMapTransform3 * cameraShadowPosition;
                let projectedShadowPoint = projectShadowPosition(shadowPosition, lightSource.shadowMapLayer + 2.0f);
                shadowFactor = computeShadowFactorFor(projectedShadowPoint.xyz, projectedShadowPoint.w);
            }
		}

		if(shadowFactor <= 0.0f)
			continue;

		let lightRadius = lightSource.radius;
		let spotAttenuation = smoothstep(lightSource.outerCosCutoff, lightSource.innerCosCutoff, spotCos)*pow(spotCos, lightSource.spotExponent);

		// Attenuation factor from "Real Shading in Unreal Engine 4"
		let falloff = computeLightFalloff(dist, lightRadius);
        let attenuation = shadowFactor*spotAttenuation*falloff;

        // Compute the fresnel factor
        let H = normalize(L + viewVector);
        let NdotH = max(0.0f, dot(normal, H));
		let VdotH = max(0.0f, dot(viewVector, H));

        // Compute the cook torrance factors.
        let F = fresnelSchlick(F0, VdotH);
        let D = specularDistribution(directAlpha, NdotH);
		let G = cookTorranceMasking(directAlpha, NdotL, NdotV);

        // Add the light contribution.
        accumulatedColor += lightSource.intensity.rgb*attenuation*(diff + F*D*G)*Pi*NdotL;
    }

    // Return the final lighted color.
    color = float4(accumulatedColor, translucencyWithFresnel);
}

code_block forwardMetallicRoughnessLightingModel
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
	in emission: float4;
    in albedo: float4;
    in metallic: float;
    in roughness: float;
	in occlusion: float;
    out color: float4;

	let dielectricSpecular = float3(0.04f, 0.04f, 0.04f);
	let black = float3(0.0f, 0.0f, 0.0f);
	let Cdiff = mix(albedo.rgb * (1.0f - dielectricSpecular.r), black, metallic);
	let F0 = mix(dielectricSpecular, albedo.rgb, metallic);
	let alpha = roughness*roughness;
	
    color: color <== forwardLightingModel
		emission: emission
		albedo: albedo.rgb
        Cdiff: Cdiff
        F0: F0 roughness: roughness
		occlusion: occlusion
		translucencyFactor: albedo.a
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}

code_block forwardSpecularityGlossinessLightingModel
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
    in emission: float4;
    in albedo: float4;
    in specular: float3;
    in glossiness: float;
	in occlusion: float;
    out color: float4;

	let Cdiff = albedo.rgb*(1.0f - max(specular.r, max(specular.g, specular.b)));
	let F0 = specular;
	let roughness = 1.0f - glossiness;

    color: color <== forwardLightingModel
		emission: emission
		albedo: albedo.rgb
        Cdiff: Cdiff
        F0: F0 roughness: roughness
		occlusion: occlusion
		translucencyFactor: albedo.a
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}