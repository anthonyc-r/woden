import compute.environment;
import compute.stage;
import texture.functions;
import math.gamma;

uniform(binding = Textures.Textures) sourceTexture : texture2D;

buffer(binding=StorageBuffers.Buffers) DecodedBuffer
{
    data: float4[];
}

buffer(binding=StorageBuffers.Buffers + 1) EncodedBuffer
{
    data: uint[];
}

uniform(push_constant=Arguments) EncodingArguments
{
    bufferSize: uint;
	width: uint;
	height: uint;
	bufferBaseIndex: uint;
}

code_block(compute, localSizeX = 8, localSizeY = 8) fetch_texture
{
	using ComputeStage;
	using EncodingArguments;
	
	let texelIndex = globalInvocationID.y*width + globalInvocationID.x;
	if(texelIndex < bufferSize)
	{
		DecodedBuffer.data[bufferBaseIndex + texelIndex]
			= texelFetch(sourceTexture, globalInvocationID.xy);
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) fetch_normalTexture
{
	using ComputeStage;
	using EncodingArguments;
	
	let texelIndex = globalInvocationID.y*width + globalInvocationID.x;
	if(texelIndex < bufferSize)
	{
		DecodedBuffer.data[bufferBaseIndex + texelIndex]
			= float4(decodeNormalTexel(texelFetch(sourceTexture, globalInvocationID.xy)), 1.0f);
	}
}

uniform(push_constant=Arguments) MipmapLevelArguments
{
    sourceLevelIndex: uint;
    sourceWidth: uint;
    sourceHeight: uint;
    destLevelIndex: uint;
    destWidth: uint;
    destHeight: uint;
}

code_block(compute, localSizeX = 8, localSizeY = 8) mipmap
{
	using ComputeStage;
	using MipmapLevelArguments;
	using DecodedBuffer;
	
	if(globalInvocationID.x < destWidth && globalInvocationID.y < destHeight)
	{
		let sourcePosition = globalInvocationID.xy*2u;
		let sourceIndex = sourceLevelIndex + sourceWidth*sourcePosition.y + sourcePosition.x;
		let topLeft = data[sourceIndex];
		let topRight = data[sourceIndex + 1u];
		let bottomLeft = data[sourceWidth + sourceIndex];
		let bottomRight = data[sourceWidth + sourceIndex + 1u];
		data[destLevelIndex + destWidth*globalInvocationID.y + globalInvocationID.x]
			= (topLeft + topRight + bottomLeft + bottomRight) * 0.25f;
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) mipmap_normal
{
	using ComputeStage;
	using MipmapLevelArguments;
	using DecodedBuffer;
	
	if(globalInvocationID.x < destWidth && globalInvocationID.y < destHeight)
	{
		let sourcePosition = globalInvocationID.xy*2u;
		let sourceIndex = sourceLevelIndex + sourceWidth*sourcePosition.y + sourcePosition.x;
		let topLeft = data[sourceIndex];
		let topRight = data[sourceIndex + 1u];
		let bottomLeft = data[sourceWidth + sourceIndex];
		let bottomRight = data[sourceWidth + sourceIndex + 1u];
		data[destLevelIndex + destWidth*globalInvocationID.y + globalInvocationID.x]
			= normalize(topLeft + topRight + bottomLeft + bottomRight);
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) decode_bgra8
{
	using ComputeStage;
	using EncodingArguments;
	
	let index = width*globalInvocationID.y + globalInvocationID.x;
	if(index < bufferSize)
	{
		let encodedTexel = EncodedBuffer.data[index];
		DecodedBuffer.data[index] = unpackUnorm4x8(encodedTexel).bgra;
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) decode_bgra8_normalXYZ
{
	using ComputeStage;
	using EncodingArguments;
	
	let index = width*globalInvocationID.y + globalInvocationID.x;
	if(index < bufferSize)
	{
		let encodedTexel = EncodedBuffer.data[index];
		let decodedTexel = unpackUnorm4x8(encodedTexel).bgra;
		
		DecodedBuffer.data[index] = float4(decodedTexel.rgb*2.0f - 1.0f, 0.0f);
	}
}
code_block(compute, localSizeX = 8, localSizeY = 8) decode_bgra8_srgb
{
	using ComputeStage;
	using EncodingArguments;
	
	let index = width*globalInvocationID.y + globalInvocationID.x;
	if(index < bufferSize)
	{
		let encodedTexel = EncodedBuffer.data[index];
		DecodedBuffer.data[index] = decodeSRGB(unpackUnorm4x8(encodedTexel).bgra);
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_bgra8
{
	using ComputeStage;
	using EncodingArguments;
	
	let index = width*globalInvocationID.y + globalInvocationID.x;
	if(index < bufferSize)
	{
		let color = DecodedBuffer.data[index];
		EncodedBuffer.data[index] = packUnorm4x8(color.bgra);
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_bgra_normal
{
	using ComputeStage;
	using EncodingArguments;
	
	let index = width*globalInvocationID.y + globalInvocationID.x;
	if(index < bufferSize)
	{
		let color = encodeNormalTexel(DecodedBuffer.data[index].xyz);
		EncodedBuffer.data[index] = packUnorm4x8(color.bgra);
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_bgra8_srgb
{
	using ComputeStage;
	using EncodingArguments;
	
	let index = width*globalInvocationID.y + globalInvocationID.x;
	if(index < bufferSize)
	{
		let color = DecodedBuffer.data[index];
		EncodedBuffer.data[index] = packUnorm4x8(encodeSRGB(color.bgra));
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_r8g8
{
	using ComputeStage;
	using EncodingArguments;
	
	let sourceIndex = (width*globalInvocationID.y + globalInvocationID.x)*2u;
	let destIndex = width*globalInvocationID.y + globalInvocationID.x;
	if(sourceIndex < bufferSize)
	{
		let c1 = DecodedBuffer.data[sourceIndex].rg;
		let c2 = DecodedBuffer.data[sourceIndex + 1u].rg;
		EncodedBuffer.data[destIndex] = packUnorm4x8(float4(c1, c2));
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_r8
{
	using ComputeStage;
	using EncodingArguments;
	
	let sourceIndex = (width*globalInvocationID.y + globalInvocationID.x)*4u;
	let destIndex = width*globalInvocationID.y + globalInvocationID.x;
	if(sourceIndex < bufferSize)
	{
		let c1 = DecodedBuffer.data[sourceIndex].r;
		let c2 = DecodedBuffer.data[sourceIndex + 1u].r;
		let c3 = DecodedBuffer.data[sourceIndex + 2u].r;
		let c4 = DecodedBuffer.data[sourceIndex + 3u].r;
		EncodedBuffer.data[destIndex] = packUnorm4x8(float4(c1, c2, c3, c4));
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_r16
{
	using ComputeStage;
	using EncodingArguments;
	
	let sourceIndex = (width*globalInvocationID.y + globalInvocationID.x)*2u;
	let destIndex = width*globalInvocationID.y + globalInvocationID.x;
	if(sourceIndex < bufferSize)
	{
		let c1 = DecodedBuffer.data[sourceIndex].r;
		let c2 = DecodedBuffer.data[sourceIndex + 1u].r;
		EncodedBuffer.data[destIndex] = packUnorm2x16(float2(c1, c2));
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_sr16
{
	using ComputeStage;
	using EncodingArguments;
	
	let sourceIndex = (width*globalInvocationID.y + globalInvocationID.x)*2u;
	let destIndex = width*globalInvocationID.y + globalInvocationID.x;
	if(sourceIndex < bufferSize)
	{
		let c1 = DecodedBuffer.data[sourceIndex].r;
		let c2 = DecodedBuffer.data[sourceIndex + 1u].r;
		EncodedBuffer.data[destIndex] = packSnorm2x16(float2(c1, c2));
	}
}

code_block(compute, localSizeX = 8, localSizeY = 8) encode_r16g16
{
	using ComputeStage;
	using EncodingArguments;
	
	let index = width*globalInvocationID.y + globalInvocationID.x;
	if(index < bufferSize)
	{
		let color = DecodedBuffer.data[index];
		EncodedBuffer.data[index] = packUnorm2x16(color.rg);
	}
}