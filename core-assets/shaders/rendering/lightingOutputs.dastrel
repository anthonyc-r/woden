import fragment.stage;
import lighting.forwardModel;

/// TODO: Check the users of this.
code_block forwardLightingOutput
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
    in emission: float4;
    in albedo: float4;
    in smoothness: float;
    in fresnel: float3;
	in occlusion: float;

	let Cdiff = albedo.rgb*(1.0f - max(fresnel.r, max(fresnel.g, fresnel.b)));

    color: FragmentStage.colorOutput0 <== forwardLightingModel
        emission: emission albedo: albedo.rgb
        Cdiff: Cdiff
		translucencyFactor: albedo.a
        F0: fresnel roughness: 1.0f - smoothness occlusion: occlusion
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}

code_block forwardMetallicRoughnessLightingOutput
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
    in emission: float4;
    in albedo: float4;
    in metallic: float;
    in roughness: float;
	in occlusion: float;

    color: FragmentStage.colorOutput0 <== forwardMetallicRoughnessLightingModel
        emission: emission albedo: albedo
        metallic: metallic roughness: roughness occlusion: occlusion
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}

code_block forwardSpecularityGlossinessLightingOutput
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
    in emission: float4;
    in albedo: float4;
    in specular: float3;
    in glossiness: float;
	in occlusion: float;

    color: FragmentStage.colorOutput0 <== forwardSpecularityGlossinessLightingModel
        emission: emission albedo: albedo
        specular: specular glossiness: glossiness occlusion: occlusion
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}

code_block forwardFlatOutput
{
    in color: float4;

    FragmentStage.colorOutput0 = color;
}

code_block forwardValidationOutput
{
    in albedo: float4;
    in metallic: float;

    let albedoLuma = dot(albedo.rgb, float3(0.2126f, 0.7152f, 0.0722f));
    let result = float4(albedoLuma, albedoLuma, albedoLuma, albedo.a);
    if(metallic == 0.0f) {
        if (albedoLuma < 0.03189603307301152f)
            result = float4(1.0f, 0.0f, 0.0f, albedo.a);
        else if(albedoLuma > 0.8962693533742664f)
            result = float4(0.0f, 0.0f, 1.0f, albedo.a);
    }
    else if(metallic == 1.0f)
    {
        if (albedoLuma < 0.49102084984783556f)
            result = float4(1.0f, 0.0f, 0.0f, albedo.a);
        else if(albedoLuma > 1.0f)
            result = float4(0.0f, 0.0f, 1.0f, albedo.a);
    }
    else
    {
        result = float4(1.0f, 1.0f, 0.0f, albedo.a);
    }

    FragmentStage.colorOutput0 = result;
}
