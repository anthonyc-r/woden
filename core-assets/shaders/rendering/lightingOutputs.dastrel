import fragment.stage;
import lighting.forwardModel;

/// TODO: Check the users of this.
code_block forwardLightingOutput
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
    in emission: float4;
    in albedo: float4;
    in smoothness: float;
    in fresnel: float3;

	let Cdiff = albedo.rgb*(1.0f - max(fresnel.r, max(fresnel.g, fresnel.b)));
	
    color: FragmentStage.colorOutput0 <== forwardLightingModel
        emission: emission albedo: albedo.rgb
        Cdiff: Cdiff
		translucencyFactor: albedo.a
        F0: fresnel roughness: 1.0f - smoothness
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}

code_block forwardMetallicRoughnessLightingOutput
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
    in emission: float4;
    in albedo: float4;
    in metallic: float;
    in roughness: float;

    color: FragmentStage.colorOutput0 <== forwardMetallicRoughnessLightingModel
        emission: emission albedo: albedo
        metallic: metallic roughness: roughness
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}

code_block forwardSpecularityGlossinessLightingOutput
{
    in normal: float3;
    in surfaceNormal: float3;
    in viewVector: float3;
    in position: float3;
    in emission: float4;
    in albedo: float4;
    in specular: float3;
    in glossiness: float;

    color: FragmentStage.colorOutput0 <== forwardSpecularityGlossinessLightingModel
        emission: emission albedo: albedo
        specular: specular glossiness: glossiness
        normal: normal surfaceNormal: surfaceNormal viewVector: viewVector position: position;
}

code_block forwardFlatOutput
{
    in color: float4;

    FragmentStage.colorOutput0 = color;
}
