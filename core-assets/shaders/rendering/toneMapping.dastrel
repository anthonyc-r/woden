import fragment.stage;
import rendering.shaderSignature;
import rendering.environment;

import fragment.screenQuad;

uniform(binding = MaterialState.Textures) hdrColorTexture : texture2D;
uniform(binding = MaterialState.Textures + 1) sceneAverageLuminanceTexture : texture2D;

code_block(compute) autoLuminanceFilter
{
	let sceneAverageLuminance = albedoSampler.sampleLod(sceneAverageLuminanceTexture, float2(0.5f, 0.5f), 0.0f).r;
	let currentAverageLuminance = PostProcessingState.currentAverageLuminance;

	// https://placeholderart.wordpress.com/2014/12/15/implementing-a-physically-based-camera-automatic-exposure/
	let newAverageLuminance = currentAverageLuminance + (sceneAverageLuminance - currentAverageLuminance)*(1.0f - exp(-1.0f/60.0f));
	PostProcessingState.currentAverageLuminance = max(0.04f, min(200.0f, newAverageLuminance));
}

code_block(fragment) auto_linear
{
	let hdrTexel = albedoSampler.sample(hdrColorTexture, FragmentInput.texcoord);

	let luma = exp2(PostProcessingState.currentAverageLuminance) - 1.0f;
	let exposure = CameraState.exposure * 0.5f / (max(0.00001f, luma));
	let hdrColor = hdrTexel.rgb;
	let ldrColor = exposure*hdrColor;
	
	FragmentStage.colorOutput0 = float4(ldrColor, hdrTexel.a);
}

code_block(fragment) linear
{
	let hdrTexel = albedoSampler.sample(hdrColorTexture, FragmentInput.texcoord);
	
	let hdrColor = hdrTexel.rgb;
	let ldrColor = CameraState.exposure*hdrColor;
	
	FragmentStage.colorOutput0 = float4(ldrColor, hdrTexel.a);
}

code_block(fragment) reinhard
{
	let hdrTexel = albedoSampler.sample(hdrColorTexture, FragmentInput.texcoord);
	
	// Tone mapping operator from: https://learnopengl.com/Advanced-Lighting/HDR
	let hdrColor = CameraState.exposure*hdrTexel.rgb;
	let ldrColor = hdrColor / (hdrColor + 1.0f);
	
	FragmentStage.colorOutput0 = float4(ldrColor, hdrTexel.a);
}

code_block(fragment) exponential
{
	let hdrTexel = albedoSampler.sample(hdrColorTexture, FragmentInput.texcoord);
	
	// Tone mapping operator from: https://learnopengl.com/Advanced-Lighting/HDR
	let hdrColor = hdrTexel.rgb;
	let ldrColor = 1.0f - exp(-hdrColor * CameraState.exposure);
	
	FragmentStage.colorOutput0 = float4(ldrColor, hdrTexel.a);
}
