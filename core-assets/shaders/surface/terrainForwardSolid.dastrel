import shaderSignature;
import environment;
import fragment;
import terrainMaterial;
import lighting;

code_block(fragment) main
{
    let dh = 0.5f*MaterialState.heightMapScale;

    let surfaceTexcoord = TerrainFragmentInput.surfaceTexcoord;
    let objectPosition = TerrainFragmentInput.objectPosition;

    if(surfaceTexcoord.s < 0.0f || surfaceTexcoord.t < 0.0f || surfaceTexcoord.s > 1.0f || surfaceTexcoord.t > 1.0f)
        discard;

    // Fetch the splatting
    let splatting = albedoSampler.sample(splattingTexture, surfaceTexcoord);

    // Compute the height map derivatives
    let dx = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(dh.x, 0.0f)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(dh.x, 0.0f)).r;
    let dy = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(0.0f, dh.y)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(0.0f, dh.y)).r;

    // Compute the object space normal
    let on = normalize(float3(-dx*MaterialState.heightScale, 1.0f, dy*MaterialState.heightScale));

    // Fetch the albedo.
    let albedo = TerrainFragmentInput.color*MaterialState.albedo;

    // Fetch the actual normal
    let N = transformNormalToView(on);

    // Compute the smoothness and the fresnel factor.
    let fresnel = MaterialState.fresnel;
    let smoothness = MaterialState.smoothness;

    let V = normalize(-TerrainFragmentInput.position);

    color: FragmentOutput.color <== forwardLightingModel
        albedo: albedo
        fresnel: fresnel smoothness: smoothness
        normal: N surfaceNormal: N viewVector: V position: TerrainFragmentInput.position;
}
