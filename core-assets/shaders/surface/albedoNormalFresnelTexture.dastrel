import shaderSignature;
import environment;
import fragment;
import material;
import lighting;

code_block(fragment) main
{
    let t = normalize(FragmentInput.tangent);
    let b = normalize(FragmentInput.bitangent);
    let n = normalize(FragmentInput.normal);
    let V = normalize(-FragmentInput.position);

    let albedo = FragmentInput.color * albedoSampler.sample(albedoTexture, FragmentInput.texcoord);
    let fresnel = albedoSampler.sample(fresnelTexture, FragmentInput.texcoord).rgb;
    let tangentNormal = normalSampler.sample(normalTexture, FragmentInput.texcoord).agb*2.0f - 1.0f;
    let TBN = float3x3(t, b, n);
    let N = normalize(TBN*tangentNormal);

    color: FragmentOutput.color <== forwardLightingModel
        albedo: albedo*MaterialState.albedo
        fresnel: fresnel smoothness: MaterialState.smoothness
        normal: N surfaceNormal: n viewVector: V position: FragmentInput.position;
}
