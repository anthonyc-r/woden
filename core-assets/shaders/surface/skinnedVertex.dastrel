import environment;
import vertexEnvironment;

semantic SkinnedGenericVertexLayout {
    in(0) position: float3;
    in(1) texcoord: float2;
    in(2) color: float4;
    in(3) normal: float3;
    in(4) tangent4: float4;
    in(5) boneWeights: float4;
    in(6) boneIndices: int4;
}

semantic VertexOutput {
    out(0) position: float3;
    out(1) texcoord: float2;
    out(2) color: float4;
    out(3) normal: float3;
    out(4) tangent: float3;
    out(5) bitangent: float3;
}

buffer(binding=ObjectState.ExtraObjectState) PoseState
{
    matrices: float4x4[];
}

function skinPosition(position: float3) -> float3
{
    using PoseState;
    using SkinnedGenericVertexLayout;

    let position4 = float4(position, 1.0f);
    let result = (matrices[boneIndices.x] * position4).xyz * boneWeights.x;
    result += (matrices[boneIndices.y] * position4).xyz * boneWeights.y;
    result += (matrices[boneIndices.z] * position4).xyz * boneWeights.z;
    result += (matrices[boneIndices.w] * position4).xyz * boneWeights.w;
    return result;
}

function skinVector(vector: float3) -> float3
{
    using PoseState;
    using SkinnedGenericVertexLayout;

    let vector4 = float4(vector, 0.0f);
    let result = (matrices[boneIndices.x] * vector4).xyz * boneWeights.x;
    result += (matrices[boneIndices.y] * vector4).xyz * boneWeights.y;
    result += (matrices[boneIndices.z] * vector4).xyz * boneWeights.z;
    result += (matrices[boneIndices.w] * vector4).xyz * boneWeights.w;
    return result;
}
