import shaderSignature;

struct ObjectStateData
{
    matrix: float4x4;
    inverseMatrix: float4x4;
    color: float4;
    visible: int;
}

uniform(binding=ObjectState.ObjectState) ObjectState
{
    objectState: ObjectStateData;
}

buffer(binding=ObjectState.InstanceObjectState) InstanceObjectState
{
    instanceStates: ObjectStateData[];
}

uniform(binding=CameraState.ObjectState) CameraState
{
    inverseViewMatrix: float4x4;
    viewMatrix: float4x4;

    projectionMatrix: float4x4;
    inverseProjectionMatrix: float4x4;

    screenSize: float2;
    inverseScreenSize: float2;

    currentTime: float;
}

uniform(binding=LightingState.GlobalLightingState) GlobalLightingState
{
    // Hemisphere lighting
    groundLighting: float4;
    skyLighting: float4;

    // Shadow mapping extents
    shadowMapExtent: float2;
    shadowMapInverseExtent: float2;

    // Normal lights
    sunDirection: float3;
    numberOfLights: int;
    lightSources: LightSource[16];
}

struct LightSource
{
    position: float4;
    intensity: float4;

    spotDirection: float3;
    shadowMapLayer: float;

    innerCosCutoff: float;
    outerCosCutoff: float;
    spotExponent: float;
    radius: float;

    cascadeSplitOffsets: float4;
    cascadeFrustumPlane: float4;

	shadowMapTransform: float4x4;
    shadowMapTransform2: float4x4;
    shadowMapTransform3: float4x4;
}

function cameraWorldPosition() -> float3
{
    using CameraState;

    return inverseViewMatrix[3].xyz;
}

function cameraObjectPosition() -> float3
{
    using CameraState;

    //return (inverseViewMatrix * viewMatrix[3]).xyz;
    return inverseViewMatrix[3].xyz;
}

function fresnelSchlick(F0: float3, cosTheta: float) -> float3
{
    let powFactor = 1.0f - cosTheta;
    let powFactor2 = powFactor * powFactor;
    let powFactor4 = powFactor2 * powFactor2;
    let powValue = powFactor4 * powFactor;

    return F0 + (float3(1.0f, 1.0f, 1.0f) - F0) * powValue;
}

function fresnelSchlick(F0: float, cosTheta: float) -> float
{
    let powFactor = 1.0f - cosTheta;
    let powFactor2 = powFactor * powFactor;
    let powFactor4 = powFactor2 * powFactor2;
    let powValue = powFactor4 * powFactor;

    return F0 + (1.0f - F0) * powValue;
}

function offsetWithRoundingPeriod(offset: float, period: float) -> float
{
    return (period != 0.0f)
        ? floor(offset/period)*period
        : 0.0f;
}

function offsetWithRoundingPeriod(offset: float3, period: float3) -> float3
{
    return float3(
        offsetWithRoundingPeriod(offset.x, period.x),
        offsetWithRoundingPeriod(offset.y, period.y),
        offsetWithRoundingPeriod(offset.z, period.z));
}

function clipMapOffsetWithPeriod(clipMapPeriod: float3) -> float3
{
    return offsetWithRoundingPeriod(cameraObjectPosition(), clipMapPeriod);
}

function clipMapOffsetWithPeriod(clipMapPeriod: float2) -> float3
{
    return clipMapOffsetWithPeriod(float3(clipMapPeriod.x, 0.0f, clipMapPeriod.y));
}
