import shaderSignature;
import environment;
import vertexEnvironment;
import vertex;
import terrainMaterial;

code_block(vertex) main
{
    using CameraState;
    using MaterialState;

    let position = float3(GenericVertexLayout.position.x, 0.0f,  GenericVertexLayout.position.y) + clipMapOffsetWithPeriod(clipMapPeriod);
    let lod = GenericVertexLayout.position.z;

    let surfaceTexcoord = surfacePositionIntoTexcoord(position);

    if(isCurrentObjectInvisible() /*|| surfaceTexcoord.s <= -0.1f || surfaceTexcoord.t <= -0.1f || surfaceTexcoord.s >= 1.1f || surfaceTexcoord.t >= 1.1f*/)
    {
        VertexStage.screenPosition = float4(2.0f, 2.0f, 2.0f, 1.0f);
        return;
    }


    // Compute the height
    let height = displacementSampler.sampleLod(heightMapTexture, surfaceTexcoord, lod).r*heightScale + heightOffset;

    position += float3(0.0f, height, 0.0f);

    TerrainVertexOutput.color = currentObjectColor();
    /*if(lod == 0.0f)
        TerrainVertexOutput.color = float4(1.0f, 0.0f, 0.0f, 1.0f);
    else if(lod == 1.0f)
        TerrainVertexOutput.color = float4(0.0f, 1.0f, 0.0f, 1.0f);
    else if(lod == 2.0f)
        TerrainVertexOutput.color = float4(0.0f, 0.0f, 1.0f, 1.0f);*/

    TerrainVertexOutput.surfaceTexcoord = surfaceTexcoord;
    TerrainVertexOutput.objectPosition = position;
    let position4 = transformPositionToView(position);

    TerrainVertexOutput.position =  position4.xyz;
    VertexStage.screenPosition = projectionMatrix * position4;
}
