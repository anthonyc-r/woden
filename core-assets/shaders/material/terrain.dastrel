import vertex.stage;
import fragment.stage;


import rendering.shaderSignature;
import rendering.environment;
import rendering.depthNormalFragmentOutput;
import rendering.lightingOutputs;

import vertex.genericLayout;

import texture.functions;

uniform(binding=MaterialState.Attributes) MaterialState
{
    albedo: float4;
    metallicFactor: float;
    roughnessFactor: float;

    textureScaleAndOffset: float4[5];
}

buffer(binding=RenderableState.DeformationState) TerrainState
{
    clipMapPeriod: float2;

    heightMapScale: float2;
    heightMapOffset: float2;

    heightScale: float;
    heightOffset: float;
}

uniform(binding = RenderableState.Textures) heightMapTexture : texture2D;
uniform(binding = RenderableState.Textures + 1) splattingTexture : texture2D;

uniform(binding = MaterialState.Textures) albedoTexture0 : texture2D;
uniform(binding = MaterialState.Textures + 1) albedoTexture1 : texture2D;
uniform(binding = MaterialState.Textures + 2) albedoTexture2 : texture2D;
uniform(binding = MaterialState.Textures + 3) albedoTexture3 : texture2D;
uniform(binding = MaterialState.Textures + 4) albedoTexture4 : texture2D;

uniform(binding = MaterialState.Textures + 5) normalTexture0 : texture2D;
uniform(binding = MaterialState.Textures + 6) normalTexture1 : texture2D;
uniform(binding = MaterialState.Textures + 7) normalTexture2 : texture2D;
uniform(binding = MaterialState.Textures + 8) normalTexture3 : texture2D;
uniform(binding = MaterialState.Textures + 9) normalTexture4 : texture2D;

uniform(binding = MaterialState.Textures + 10) rmaTexture0 : texture2D;
uniform(binding = MaterialState.Textures + 11) rmaTexture1 : texture2D;
uniform(binding = MaterialState.Textures + 12) rmaTexture2 : texture2D;
uniform(binding = MaterialState.Textures + 13) rmaTexture3 : texture2D;
uniform(binding = MaterialState.Textures + 14) rmaTexture4 : texture2D;

function surfacePositionIntoTexcoord(position: float3) -> float2
{
    return float2(position.x, position.z)*0.5f*TerrainState.heightMapScale + 0.5f + TerrainState.heightMapOffset;
}

function surfaceTexcoordIntoPosition(texcoord: float2) -> float3
{
    let result = (texcoord - TerrainState.heightMapOffset - 0.5f)*2.0f/TerrainState.heightMapScale;
    return float3(result.x, 0.0f, result.y);
}

function mixSplatting(v0: float4, v1: float4, v2: float4, v3: float4, v4: float4, alpha: float4) -> float4
{
    let a0 = 1.0f - dot(alpha, float4(1.0f, 1.0f, 1.0f, 1.0f));
    return v0*a0 + v1*alpha.x + v2*alpha.y + v3*alpha.z + v4*alpha.w;
}

function mixSplatting(v0: float3, v1: float3, v2: float3, v3: float3, v4: float3, alpha: float4) -> float3
{
    let a0 = 1.0f - dot(alpha, float4(1.0f, 1.0f, 1.0f, 1.0f));
    return v0*a0 + v1*alpha.x + v2*alpha.y + v3*alpha.z + v4*alpha.w;
}

function transformNormalToView(normal: float3) -> float3
{
    using CameraState;
    using ObjectState;
    using InstanceObjectState;

    return ((float4(normal, 0.0f) * objectState.inverseMatrix) * inverseViewMatrix).xyz;
}

function fetchAlbedoPlane(texcoord: float2, splatting: float4) -> float4
{
    using MaterialState;

    let a0 = albedoSampler.sample(albedoTexture0, texcoord*textureScaleAndOffset[0].xy + textureScaleAndOffset[0].zw);
    let a1 = albedoSampler.sample(albedoTexture1, texcoord*textureScaleAndOffset[1].xy + textureScaleAndOffset[1].zw);
    let a2 = albedoSampler.sample(albedoTexture2, texcoord*textureScaleAndOffset[2].xy + textureScaleAndOffset[2].zw);
    let a3 = albedoSampler.sample(albedoTexture3, texcoord*textureScaleAndOffset[3].xy + textureScaleAndOffset[3].zw);
    let a4 = albedoSampler.sample(albedoTexture4, texcoord*textureScaleAndOffset[4].xy + textureScaleAndOffset[4].zw);

    return mixSplatting(a0, a1, a2, a3, a4, splatting);
}

function fetchRMAPlane(texcoord: float2, splatting: float4) -> float4
{
    using MaterialState;

    let a0 = albedoSampler.sample(rmaTexture0, texcoord*textureScaleAndOffset[0].xy + textureScaleAndOffset[0].zw);
    let a1 = albedoSampler.sample(rmaTexture1, texcoord*textureScaleAndOffset[1].xy + textureScaleAndOffset[1].zw);
    let a2 = albedoSampler.sample(rmaTexture2, texcoord*textureScaleAndOffset[2].xy + textureScaleAndOffset[2].zw);
    let a3 = albedoSampler.sample(rmaTexture3, texcoord*textureScaleAndOffset[3].xy + textureScaleAndOffset[3].zw);
    let a4 = albedoSampler.sample(rmaTexture4, texcoord*textureScaleAndOffset[4].xy + textureScaleAndOffset[4].zw);

    return mixSplatting(a0, a1, a2, a3, a4, splatting);
}

function mixTriplanar(normal: float3, vx: float4, vy: float4, vz: float4) -> float4
{
    let blending = fabs(normal);
    blending = blending / (blending.x + blending.y + blending.z);

    return vx*blending.x + vy*blending.y + vz*blending.z;
}

function mixTriplanarNormal(normal: float3, vx: float3, vy: float3, vz: float3) -> float3
{
    let blending = normalize(fabs(normal));

    return vx*blending.x + vy*blending.y + vz*blending.z;
}

function fetchAlbedo(objectPosition: float3, normal: float3, splatting: float4) -> float4
{
    let vx = fetchAlbedoPlane(objectPosition.yz, splatting);
    let vy = fetchAlbedoPlane(objectPosition.xz, splatting);
    let vz = fetchAlbedoPlane(objectPosition.xy, splatting);

    return mixTriplanar(normal, vx, vy, vz);
}

function fetchRMA(objectPosition: float3, normal: float3, splatting: float4) -> float4
{
    let vx = fetchRMAPlane(objectPosition.yz, splatting);
    let vy = fetchRMAPlane(objectPosition.xz, splatting);
    let vz = fetchRMAPlane(objectPosition.xy, splatting);

    return mixTriplanar(normal, vx, vy, vz);
}

function fetchNormalPlane(texcoord: float2, splatting: float4) -> float3
{
    using MaterialState;

    let n0 = decodeNormalTexel(normalSampler.sample(normalTexture0, texcoord*textureScaleAndOffset[0].xy + textureScaleAndOffset[0].zw));
    let n1 = decodeNormalTexel(normalSampler.sample(normalTexture1, texcoord*textureScaleAndOffset[1].xy + textureScaleAndOffset[1].zw));
    let n2 = decodeNormalTexel(normalSampler.sample(normalTexture2, texcoord*textureScaleAndOffset[2].xy + textureScaleAndOffset[2].zw));
    let n3 = decodeNormalTexel(normalSampler.sample(normalTexture3, texcoord*textureScaleAndOffset[3].xy + textureScaleAndOffset[3].zw));
    let n4 = decodeNormalTexel(normalSampler.sample(normalTexture4, texcoord*textureScaleAndOffset[4].xy + textureScaleAndOffset[4].zw));

    return mixSplatting(n0, n1, n2, n3, n4, splatting);
}

function fetchNormalPlaneYZ(texcoord: float2, splatting: float4, objectNormalSigns: float3) -> float3
{
    return fetchNormalPlane(texcoord, splatting).zxy*objectNormalSigns;
}

function fetchNormalPlaneXZ(texcoord: float2, splatting: float4, objectNormalSigns: float3) -> float3
{
    return fetchNormalPlane(texcoord, splatting).yzx*float3(1.0f, 1.0f, 1.0f)*objectNormalSigns;
}

function fetchNormalPlaneXY(texcoord: float2, splatting: float4, objectNormalSigns: float3) -> float3
{
    return fetchNormalPlane(texcoord, splatting).xyz*objectNormalSigns;
}

function fetchNormal(objectPosition: float3, normal: float3, splatting: float4) -> float3
{
    let normalSigns = step(0.0f, normal)*2.0f - 1.0f;
    let vx = fetchNormalPlaneYZ(objectPosition.yz, splatting, normalSigns);
	let vy = fetchNormalPlaneXZ(objectPosition.xz, splatting, normalSigns);
    let vz = fetchNormalPlaneXY(objectPosition.xy, splatting, normalSigns);

    return mixTriplanarNormal(normal, vx, vy, vz);
}

//==============================================================================
// Vertex and fragment shader interface

semantic VertexOutput {
    out(0) position: float3;
    out(1) surfaceTexcoord: float2;
    out(2) objectPosition: float3;
    out(3) color: float4;
}

semantic FragmentInput {
    in(0) position: float3;
    in(1) surfaceTexcoord: float2;
    in(2) objectPosition: float3;
    in(3) color: float4;
}

//==============================================================================
// Vertex shader

code_block(vertex) vertex
{
    using CameraState;
    using MaterialState;
	using TerrainState;

    let position = float3(GenericVertexLayout.position.x, 0.0f, GenericVertexLayout.position.y) + clipMapOffsetWithPeriod(clipMapPeriod);
    let lod = GenericVertexLayout.position.z;

    let surfaceTexcoord = surfacePositionIntoTexcoord(position);

    if(isCurrentObjectInstanceInvisible() /*|| surfaceTexcoord.s <= -0.1f || surfaceTexcoord.t <= -0.1f || surfaceTexcoord.s >= 1.1f || surfaceTexcoord.t >= 1.1f*/)
    {
        VertexStage.screenPosition = float4(2.0f, 2.0f, -2.0f, 1.0f);
        return;
    }

    // Compute the height
    let height = displacementSampler.sampleLod(heightMapTexture, surfaceTexcoord, lod).r*heightScale + heightOffset;

    position += float3(0.0f, height, 0.0f);

	/*let color = float4(1.0f, 0.0f, 0.0f, 1.0f);
	if(lod == 1.0f)
		color = float4(0.0f, 1.0f, 0.0f, 1.0f);
	if(lod == 2.0f)
		color = float4(0.0f, 0.0f, 1.0f, 1.0f);*/
	
    VertexOutput.color = currentObjectInstanceColor();
	
    VertexOutput.surfaceTexcoord = surfaceTexcoord;
    VertexOutput.objectPosition = position;
    let position4 = transformPositionToView(position);

    VertexOutput.position =  position4.xyz;
    VertexStage.screenPosition = projectionMatrix * position4;
}

//==============================================================================
// Depth normal output

code_block(fragment) depthNormal_fragment
{
    let dh = 0.5f*TerrainState.heightMapScale;

    let surfaceTexcoord = FragmentInput.surfaceTexcoord;
    let objectPosition = FragmentInput.objectPosition;

    if(surfaceTexcoord.s < 0.0f || surfaceTexcoord.t < 0.0f || surfaceTexcoord.s > 1.0f || surfaceTexcoord.t > 1.0f)
        discard;

    // Compute the height map derivatives
    let dx = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(dh.x, 0.0f)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(dh.x, 0.0f)).r;
    let dy = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(0.0f, dh.y)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(0.0f, dh.y)).r;

    // Compute the object space normal.
    let on = normalize(float3(-dx*TerrainState.heightScale, 1.0f, -dy*TerrainState.heightScale));
    let SN = transformNormalToView(on);

	// For double sided material.
	if(isInBackFace())
		SN = -SN;

    encodeViewNormalOutput(normalize(SN));
}

//==============================================================================
// Forward lighting model.

function convertTopTangentNormal(N: float3, tangentNormal: float3) -> float3
{
	let upVector = float3(0.0f, 0.0f, 1.0f);
	let T = cross(upVector, N);
	let B = cross(N, T);
	
	return normalize(T*tangentNormal.x + B*tangentNormal.y + N*tangentNormal.z);
}

code_block(fragment) forward_splatting
{
    let dh = 0.5f*TerrainState.heightMapScale;

    let surfaceTexcoord = FragmentInput.surfaceTexcoord;
    let objectPosition = FragmentInput.objectPosition;

    if(surfaceTexcoord.s < 0.0f || surfaceTexcoord.t < 0.0f || surfaceTexcoord.s > 1.0f || surfaceTexcoord.t > 1.0f)
        discard;

    // Fetch the splatting
    let splatting = albedoSampler.sample(splattingTexture, surfaceTexcoord);

    // Compute the height map derivatives
    let dx = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(dh.x, 0.0f)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(dh.x, 0.0f)).r;
    let dy = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(0.0f, dh.y)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(0.0f, dh.y)).r;

    // Compute the object space normal.
    let on = normalize(float3(-dx*TerrainState.heightScale, 1.0f, -dy*TerrainState.heightScale));

    // Fetch the albedo.
    let rawAlbedo = fetchAlbedoPlane(objectPosition.xz, splatting);
	let aoRoughnessMetallicSample = fetchRMAPlane(objectPosition.xz, splatting);
    let albedo = FragmentInput.color*MaterialState.albedo*float4(rawAlbedo.rgb, 1.0f);

    // Fetch the actual normal
    let rawNormal = fetchNormalPlane(objectPosition.xz, splatting);
    let N = normalize(transformNormalToView(convertTopTangentNormal(on, rawNormal)));

	// For double sided material.
	if(isInBackFace())
		N = -N;

    let SN = transformNormalToView(on);

    // Compute the smoothness and the fresnel factor.
	let ao = aoRoughnessMetallicSample.r;
	let metallic = aoRoughnessMetallicSample.b*MaterialState.metallicFactor;
	let roughness = aoRoughnessMetallicSample.g*MaterialState.roughnessFactor;

    let V = normalize(-FragmentInput.position);

    forwardMetallicRoughnessLightingOutput
        emission: 0.0f albedo: albedo occlusion: ao
        metallic: metallic roughness: roughness
        normal: N surfaceNormal: SN viewVector: V position: FragmentInput.position;
    //FragmentStage.colorOutput0 = float4(on*0.5f + 0.5f, 1.0f);
    //FragmentStage.colorOutput0 = float4(on, 1.0f);
    //FragmentStage.colorOutput0 = float4(SN*0.5f + 0.5f, 1.0f);
	//FragmentStage.colorOutput0 = float4(on, 1.0f);
}

code_block(fragment) forward_triplanarSplatting
{
    let dh = 0.5f*TerrainState.heightMapScale;

    let surfaceTexcoord = FragmentInput.surfaceTexcoord;
    let objectPosition = FragmentInput.objectPosition;

    if(surfaceTexcoord.s < 0.0f || surfaceTexcoord.t < 0.0f || surfaceTexcoord.s > 1.0f || surfaceTexcoord.t > 1.0f)
        discard;

    // Fetch the splatting
    let splatting = albedoSampler.sample(splattingTexture, surfaceTexcoord);

    // Compute the height map derivatives
    let dx = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(dh.x, 0.0f)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(dh.x, 0.0f)).r;
    let dy = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(0.0f, dh.y)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(0.0f, dh.y)).r;

    // Compute the object space normal.
    let on = normalize(float3(-dx*TerrainState.heightScale, 1.0f, -dy*TerrainState.heightScale));

    // Fetch the albedo.
    let rawAlbedo = fetchAlbedo(objectPosition, on, splatting);
	let aoRoughnessMetallicSample = fetchRMA(objectPosition, on, splatting);
    let albedo = FragmentInput.color*MaterialState.albedo*float4(rawAlbedo.rgb, 1.0f);

    // Fetch the actual normal
	//walbedo = 1.0f;
	//on = float3(-1.0f, 0.0f, 0.0f);
    let rawNormal = fetchNormal(objectPosition, on, splatting);
    let N = normalize(transformNormalToView(rawNormal));

	// For double sided material.
	if(isInBackFace())
		N = -N;

    let SN = transformNormalToView(on);

    // Compute the smoothness and the fresnel factor.
	let ao = aoRoughnessMetallicSample.r;
	let metallic = aoRoughnessMetallicSample.b*MaterialState.metallicFactor;
	let roughness = aoRoughnessMetallicSample.g*MaterialState.roughnessFactor;

    let V = normalize(-FragmentInput.position);

    forwardMetallicRoughnessLightingOutput
        emission: 0.0f albedo: albedo occlusion: ao
        metallic: metallic roughness: roughness
        normal: N surfaceNormal: SN viewVector: V position: FragmentInput.position;
    //FragmentStage.colorOutput0 = float4(on*0.5f + 0.5f, 1.0f);
    //FragmentStage.colorOutput0 = float4(on, 1.0f);
    //FragmentStage.colorOutput0 = float4(SN*0.5f + 0.5f, 1.0f);
	//FragmentStage.colorOutput0 = float4(on, 1.0f);
}

code_block(fragment) forward_solid
{
    let dh = 0.5f*TerrainState.heightMapScale;

    let surfaceTexcoord = FragmentInput.surfaceTexcoord;
    let objectPosition = FragmentInput.objectPosition;

    if(surfaceTexcoord.s < 0.0f || surfaceTexcoord.t < 0.0f || surfaceTexcoord.s > 1.0f || surfaceTexcoord.t > 1.0f)
        discard;

    // Fetch the splatting
    let splatting = albedoSampler.sample(splattingTexture, surfaceTexcoord);

    // Compute the height map derivatives
    let dx = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(dh.x, 0.0f)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(dh.x, 0.0f)).r;
    let dy = displacementSampler.sample(heightMapTexture, surfaceTexcoord + float2(0.0f, dh.y)).r - displacementSampler.sample(heightMapTexture, surfaceTexcoord - float2(0.0f, dh.y)).r;

    // Compute the object space normal
    let on = normalize(float3(-dx*TerrainState.heightScale, 1.0f, dy*TerrainState.heightScale));

    // Fetch the albedo.
    let albedo = FragmentInput.color*MaterialState.albedo;

    // Fetch the actual normal
    let N = transformNormalToView(on);

	// For double sided material.
	if(isInBackFace())
		N = -N;

    let V = normalize(-FragmentInput.position);
		
    // Compute the smoothness and the fresnel factor.
	let metallic = MaterialState.metallicFactor;
	let roughness = MaterialState.roughnessFactor;

    forwardMetallicRoughnessLightingOutput
        emission: 0.0f albedo: albedo occlusion: 1.0f
        metallic: metallic roughness: roughness
        normal: N surfaceNormal: N viewVector: V position: FragmentInput.position;
}

code_block(fragment) forward_wire
{
    let surfaceTexcoord = FragmentInput.surfaceTexcoord;
    if(surfaceTexcoord.s < 0.0f || surfaceTexcoord.t < 0.0f || surfaceTexcoord.s > 1.0f || surfaceTexcoord.t > 1.0f)
        discard;

    forwardFlatOutput color: FragmentInput.color*MaterialState.albedo;
}

code_block(fragment) forward_isolines
{
    let surfaceTexcoord = FragmentInput.surfaceTexcoord;
    if(surfaceTexcoord.s < 0.0f || surfaceTexcoord.t < 0.0f || surfaceTexcoord.s > 1.0f || surfaceTexcoord.t > 1.0f)
        discard;

    // Fetch the height
    let height = displacementSampler.sample(heightMapTexture, surfaceTexcoord).r*TerrainState.heightScale;
    // TODO: Use derivatives here.
    let isolinePeriod = 1.0f - smoothstep(0.0f, 0.06f, fract(height *0.25f));

    forwardFlatOutput color: FragmentInput.color*isolinePeriod;
}
