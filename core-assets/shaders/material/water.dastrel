import vertex.stage;
import fragment.stage;

import rendering.shaderSignature;
import rendering.environment;
import rendering.lightingOutputs;

import lighting.forwardModel;
import lighting.functions;

import vertex.genericLayout;
import texture.functions;

struct WaterHarmonic
{
    centerOrDirection: float2;
    amplitude: float;
    frequency: float;

    padding: float3;
    isRadial: int;
}

uniform(binding=MaterialState.Attributes) MaterialState
{
    clipMapPeriod: float2;
    albedo: float4;

    fresnel: float3;
    smoothness: float;

    textureScale: float2;
    textureOffset: float2;

    padding: float3;
    propagationSpeed: float;

    harmonics: WaterHarmonic[5];
}

uniform(binding = MaterialState.Textures) albedoTexture : texture2D;
uniform(binding = MaterialState.Textures + 1) normalTexture : texture2D;
uniform(binding = MaterialState.Textures + 2) skyTexture : textureCube;

function transformNormalToView(normal: float3) -> float3
{
    using CameraState;
    using ObjectState;
    using InstanceObjectState;

    return ((float4(normal, 0.0f) * objectState.inverseMatrix) * inverseViewMatrix).xyz;
}

function evalWaterWaves(position: float2, lod: float) -> float3
{
    using CameraState;
    using MaterialState;

    // Add the harmonics.
    let height = 0.0f;
    let tangentialContributions = float2(0.0f, 0.0f);
	let lodAttenuation = 1.0f;//max(0.0f, 1.0f - fabs(lod)/20.0f);
    for(let i = 0; i < 5; i += 1)
    {
        // Fetch the harmonic parameters
        // Fetch the fields manually as a work-around for a metal bug.
        let centerOrDirection = harmonics[i].centerOrDirection;
        let amplitude = harmonics[i].amplitude*lodAttenuation;
        let frequency = harmonics[i].frequency;
        let isRadial = harmonics[i].isRadial;

        // Compute the distance factor.
        let distance : float;
        let distanceDerivatives : float2;
        if(isRadial == 1)
        {
            distance = length(position - centerOrDirection);
            distanceDerivatives = (position - centerOrDirection) / max(0.001f, distance);
        }
        else
        {
            distance = dot(position, centerOrDirection);
            distanceDerivatives = centerOrDirection;
        }

        // Compute the propagation speed factor.
        let omega = 6.283185307179586f * frequency;
        let kappa = omega / propagationSpeed;
		//let wavelength = omega * propagationSpeed;

        // Compute the contribution by the harmonic.
        let phase = kappa*distance + omega*currentTime;
        height += amplitude * sin(phase);

        // Add the tangential factor
        tangentialContributions += amplitude*kappa*cos(phase)*distanceDerivatives;
    }

    return float3(height, tangentialContributions);
}

function evalWaterHeight(position: float2, lod: float) -> float
{
    return evalWaterWaves(position, lod).x;
}

function evalWaterDerivatives(position: float2, lod: float) -> float2
{
    return evalWaterWaves(position, lod).yz;
}

function evalWaterNormalValue(position: float2, lod: float) -> float3
{
    let derivatives = evalWaterDerivatives(position, lod);
    let dx = derivatives.x;
    let dy = derivatives.y;

	return normalize(float3(-dx, 1.0f, dy));
}

function evalWaterNormalMapValue(position: float2, tangentNormal: float3, lod: float) -> float3
{
	let upVector = float3(0.0f, 0.0f, -1.0f);
	let N = evalWaterNormalValue(position, lod);
	let T = cross(upVector, N);
	let B = cross(N, T);
	
	return normalize(T*tangentNormal.x + B*tangentNormal.y + N*tangentNormal.z);
}

//==============================================================================
// Vertex and fragment shader interface

semantic WaterVertexOutput {
    out(0) position: float3;
    out(1) surfaceCoordinate: float2;
    out(2) texcoord: float2;
    out(3) color: float4;
    out(4) lod: float;
}

semantic WaterFragmentInput {
    in(0) position: float3;
    in(1) surfaceCoordinate: float2;
    in(2) texcoord: float2;
    in(3) color: float4;
    in(4) lod: float;
}

//==============================================================================
// Vertex shader

code_block(vertex) vertex
{
    using CameraState;
    using MaterialState;

    // Fetch the position and texcoord.
    let position = float3(GenericVertexLayout.position.x, 0.0f, GenericVertexLayout.position.y)
					 + clipMapOffsetWithPeriod(clipMapPeriod);
    let surfacePosition = float2(position.x, -position.z);

    let lod = transformPositionToView(position).z;
    let texcoord = surfacePosition;

    // Eval the water waves.
    let waterWaveEffect = evalWaterWaves(surfacePosition, lod);
    let height = waterWaveEffect.x;
    let tangentialContributions = waterWaveEffect.yz;

    // Apply the water height.
    position += float3(0.0f, height, 0.0f);

    WaterVertexOutput.color = currentObjectInstanceColor();
    WaterVertexOutput.surfaceCoordinate = surfacePosition;
    WaterVertexOutput.texcoord = surfacePosition*textureScale + textureOffset;
    WaterVertexOutput.lod = lod;
    let position4 = transformPositionToView(position);

    WaterVertexOutput.position =  position4.xyz;
    VertexStage.screenPosition = projectionMatrix * position4;
}


//==============================================================================
// Forward lighting model.

code_block(fragment) forward_color
{
    let texcoord = WaterFragmentInput.texcoord;
    let albedo = WaterFragmentInput.color*MaterialState.albedo*albedoSampler.sample(albedoTexture, texcoord);
    let normalMapValue = decodeNormalTexel(normalSampler.sample(normalTexture, texcoord));

    let surfacePosition = WaterFragmentInput.surfaceCoordinate;
    let N = transformNormalToView(evalWaterNormalMapValue(surfacePosition, normalMapValue, WaterFragmentInput.lod));
	//let ON = evalWaterNormalValue(surfacePosition, WaterFragmentInput.lod);
    //let N = transformNormalToView(ON);
    let V = normalize(-WaterFragmentInput.position);

	// For double sided material.
	if(isInBackFace())
		N = -N;

    forwardLightingOutput
        emission: 0.0f albedo: albedo occlusion: 1.0f
        fresnel: MaterialState.fresnel smoothness: MaterialState.smoothness
        normal: N surfaceNormal: N viewVector: V position: WaterFragmentInput.position;
	//FragmentStage.colorOutput0 = float4(ON, 1.0f);
}
