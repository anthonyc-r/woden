'From Pharo6.0 of 13 May 2016 [Latest update: #60038] on 24 June 2016 at 1:21:14.734083 pm'!MCDefinition subclass: #MCClassDefinition	instanceVariableNames: 'name superclassName variables category type comment commentStamp traitComposition classTraitComposition extraDependencies'	classVariableNames: ''	poolDictionaries: ''	category: 'Monticello-Modeling'!MCDefinition subclass: #MCMethodDefinition	instanceVariableNames: 'classIsMeta source category selector className timeStamp compilationDependencies'	classVariableNames: 'Definitions InitializersEnabled'	poolDictionaries: ''	category: 'Monticello-Modeling'!!TBehavior methodsFor: 'dependencies' stamp: 'RonieSalgado 6/11/2016 19:09'!hasExtraDependencies	^ self extraDependencies notEmpty! !!TBehavior methodsFor: 'dependencies' stamp: 'RonieSalgado 6/11/2016 19:26'!extraDependenciesString	^self hasExtraDependencies		ifTrue: [(self extraDependencies collect: #name) asString]		ifFalse: ['{}']! !!AbstractLayout methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 19:07'!classDependencies	^ #()! !!Class methodsFor: 'dependencies' stamp: 'RonieSalgado 6/11/2016 19:06'!extraDependencies	^ layout classDependencies! !!Class methodsFor: '*Monticello' stamp: 'RonieSalgado 6/11/2016 19:15'!asClassDefinition	"we use a very ugly hack to encode complex slots as string with MC... later MC shoudl model Slots directly"	self usesSpecialVariables ifFalse: [  	 ^MCClassDefinition		name: self name		superclassName: self superclass name		traitComposition: self traitCompositionString		classTraitComposition: self class traitCompositionString		extraDependencies: self extraDependenciesString		category: self category 		instVarNames: self instVarNames		classVarNames: self classVarNames		poolDictionaryNames: self sharedPoolNames		classInstVarNames: self class instVarNames		type: self typeOfClass		comment: self organization classComment	asString		commentStamp: self organization commentStamp].		^MCClassDefinition		name: self name		superclassName: self superclass name		traitComposition: self traitCompositionString		classTraitComposition: self class traitCompositionString		extraDependencies: self extraDependenciesString		category: self category 		instVarNames: (self slots collect: #definitionString)		classVarNames: (self classVariables collect: #definitionString)		poolDictionaryNames: self sharedPoolNames		classInstVarNames: (self class slots collect: #definitionString)		type: self typeOfClass		comment: self organization classComment	 asString		commentStamp: self organization commentStamp.	! !!CompiledMethod methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 17:02'!compilationDependencies	| rawDeps |	rawDeps := self propertyValueAt: #dependencies ifAbsent: [ ^ nil ].	^ rawDeps collect: [ :dep |		dep isArray ifTrue: [			{ dep first value baseClass name . dep first value isMeta . dep second}		] ifFalse: [			dep value name	] ] as: Array! !!MCClassDefinition methodsFor: 'storing' stamp: 'RonieSalgado 6/11/2016 19:32'!storeDataOn: aDataStream	| instVarSize |	instVarSize := self hasExtraDependencies		ifTrue: [ self class instSize ]		ifFalse: [			(self hasTraitComposition or: [ self hasClassTraitComposition ])				ifTrue: [ self class instSize - 1]				ifFalse: [ self class instSize - 3 ]	].		aDataStream		beginInstance: self class		size: instVarSize.	1 to: instVarSize do: [ :index |		aDataStream nextPut: (self instVarAt: index) ].! !!MCClassDefinition methodsFor: 'comparing' stamp: 'RonieSalgado 6/11/2016 19:14'!= aDefinition	^(super = aDefinition)		and: [superclassName = aDefinition superclassName		and: [self traitCompositionString = aDefinition traitCompositionString		and: [self classTraitCompositionString = aDefinition classTraitCompositionString		and: [self extraDependenciesString = aDefinition extraDependenciesString		and: [category = aDefinition category		and: [type = aDefinition type		and: [self sortedVariables = aDefinition sortedVariables		and: [comment = aDefinition comment]]]]]]]]! !!MCClassDefinition methodsFor: 'comparing' stamp: 'RonieSalgado 6/11/2016 19:29'!requirements	^ ((superclassName == #nil) or: [superclassName asString beginsWith: 'AnObsolete'])		ifTrue: [self allClassDependencies]		ifFalse: [(Array with: superclassName), self allClassDependencies]! !!MCClassDefinition methodsFor: 'comparing' stamp: 'RonieSalgado 6/11/2016 19:14'!hash	| hash |	hash := String stringHash: name initialHash: 0.	hash := String stringHash: superclassName initialHash: hash.	hash := String stringHash: self traitCompositionString initialHash: hash.	hash := String stringHash: self classTraitComposition asString initialHash: hash.	hash := String stringHash: self extraDependenciesString asString initialHash: hash.	hash := String stringHash: (category ifNil: ['']) initialHash: hash.	hash := String stringHash: type initialHash: hash.	variables do: [		:v |		hash := String stringHash: v name initialHash: hash.	].	^ hash! !!MCClassDefinition methodsFor: 'testing' stamp: 'RonieSalgado 6/11/2016 19:10'!hasExtraDependencies	^ self extraDependencies ~= '{}'! !!MCClassDefinition methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 19:11'!extraDependenciesCompiled		^(Smalltalk compiler evaluate: self extraDependenciesString)! !!MCClassDefinition methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 19:14'!extraDependenciesString	^ self extraDependencies ifNil: ['{}'].! !!MCClassDefinition methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 19:28'!allClassDependencies	^ self hasExtraDependencies ifTrue: [ self poolDictionaries , self extraDependenciesCompiled ] ifFalse: [ self poolDictionaries ]! !!MCClassDefinition methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 19:00'!extraDependencies	^extraDependencies! !!MCClassDefinition methodsFor: 'initializing' stamp: 'RonieSalgado 6/11/2016 19:02'!initializeWithName: nameStringsuperclassName: superclassStringtraitComposition: traitCompositionStringclassTraitComposition: classTraitCompositionStringextraDependencies: extraDependenciesStringcategory: categoryString instVarNames: ivarArrayclassVarNames: cvarArraypoolDictionaryNames: poolArrayclassInstVarNames: civarArraytype: typeSymbolcomment: commentStringcommentStamp: stampStringOrNil	name := nameString asSymbol.	superclassName := superclassString ifNil: ['nil'] ifNotNil: [superclassString asSymbol].	traitComposition := traitCompositionString.	classTraitComposition := classTraitCompositionString.	extraDependencies := extraDependenciesString.	category := categoryString.	name = #CompiledMethod ifTrue: [type := #compiledMethod] ifFalse: [type := typeSymbol].	comment := commentString withSqueakLineEndings.	commentStamp := stampStringOrNil ifNil: [self defaultCommentStamp].	variables := OrderedCollection  new.	self addVariables: ivarArray ofType: MCInstanceVariableDefinition.	self addVariables: cvarArray asSortedCollection ofType: MCClassVariableDefinition.	self addVariables: poolArray asSortedCollection ofType: MCPoolImportDefinition.	self addVariables: civarArray ofType: MCClassInstanceVariableDefinition.! !!MCClassDefinition class methodsFor: 'instance creation' stamp: 'RonieSalgado 6/11/2016 19:53'!name: nameStringsuperclassName: superclassStringtraitComposition: traitCompositionStringclassTraitComposition: classTraitCompositionStringcategory: categoryString instVarNames: ivarArrayclassVarNames: cvarArraypoolDictionaryNames: poolArrayclassInstVarNames: civarArraytype: typeSymbolcomment: commentStringcommentStamp: stampString		^ self name: nameString		superclassName: superclassString		traitComposition: traitCompositionString		classTraitComposition: classTraitCompositionString		extraDependencies: '{}'		category: categoryString 		instVarNames: ivarArray		classVarNames: cvarArray		poolDictionaryNames: poolArray		classInstVarNames: civarArray		type: typeSymbol		comment: commentString		commentStamp: stampString! !!MCClassDefinition class methodsFor: 'instance creation' stamp: 'RonieSalgado 6/11/2016 19:13'!name: nameStringsuperclassName: superclassStringtraitComposition: traitCompositionStringclassTraitComposition: classTraitCompositionStringextraDependencies: extraDependenciesStringcategory: categoryString instVarNames: ivarArrayclassVarNames: cvarArraypoolDictionaryNames: poolArrayclassInstVarNames: civarArraytype: typeSymbolcomment: commentStringcommentStamp: stampString		^ self instanceLike:		(self new initializeWithName: nameString					superclassName: superclassString					traitComposition: traitCompositionString					classTraitComposition: classTraitCompositionString					extraDependencies: extraDependenciesString					category: categoryString 					instVarNames: ivarArray					classVarNames: cvarArray					poolDictionaryNames: poolArray					classInstVarNames: civarArray					type: typeSymbol					comment: commentString					commentStamp: stampString)! !!MCClassDefinition class methodsFor: 'instance creation' stamp: 'RonieSalgado 6/11/2016 19:54'!name: nameStringsuperclassName: superclassStringcategory: categoryString instVarNames: ivarArrayclassVarNames: cvarArraypoolDictionaryNames: poolArrayclassInstVarNames: civarArraytype: typeSymbolcomment: commentStringcommentStamp: stampString	^ self instanceLike:		(self new initializeWithName: nameString					superclassName: superclassString					traitComposition: '{}'					classTraitComposition: '{}'					extraDependencies: '{}'					category: categoryString 					instVarNames: ivarArray					classVarNames: cvarArray					poolDictionaryNames: poolArray					classInstVarNames: civarArray					type: typeSymbol					comment: commentString					commentStamp: stampString)! !!MCDependencySorter methodsFor: 'building' stamp: 'RonieSalgado 6/11/2016 21:39'!addExternalProvisions: aCollection	| className |	self externalRequirements do: [ :each |		className := each isString ifTrue: [ each ] ifFalse: [ each first ].		(aCollection includes: className) ifTrue: [ self addProvision: each ] 	].! !!MCFileTreeStCypressReader methodsFor: 'utilities' stamp: 'RonieSalgado 6/11/2016 21:32'!addClassDefinitionFrom: classPropertiesDict comment: classComment  | categoryName className |  className := classPropertiesDict at: 'name'.  categoryName := classPropertiesDict    at: 'category'    ifAbsent: [ self packageNameFromPackageDirectory ].  self validateClassCategory: categoryName for: className.  definitions    add:      (MCClassDefinition        name: className        superclassName: (classPropertiesDict at: 'super')        traitComposition: (classPropertiesDict at: 'traitcomposition' ifAbsent: [ '{}' ])        classTraitComposition: (classPropertiesDict at: 'classtraitcomposition' ifAbsent: [ '{}' ])        extraDependencies: (classPropertiesDict at: 'extradependencies' ifAbsent: [ '{}' ])        category: categoryName        instVarNames: (classPropertiesDict at: 'instvars' ifAbsent: [ #() ])        classVarNames: (classPropertiesDict at: 'classvars' ifAbsent: [ #() ])        poolDictionaryNames: (classPropertiesDict at: 'pools' ifAbsent: [ #() ])        classInstVarNames:          (classPropertiesDict at: 'classinstvars' ifAbsent: [ #() ])        type: (classPropertiesDict at: 'type' ifAbsent: [ 'normal' ]) asSymbol        comment: classComment        commentStamp: (classPropertiesDict at: 'commentStamp' ifAbsent: [ '' ]))! !!MCFileTreeStCypressWriter methodsFor: 'writing' stamp: 'RonieSalgado 6/11/2016 21:31'!writeClassDefinition: definition    | properties |    properties := Dictionary new.    properties at: 'name' put: definition className.    properties at: 'super' put: definition superclassName.    definition traitCompositionString        ifNotNil: [ :property |             "Issue #48: https://github.com/dalehenrich/filetree/issues/48"            property ~= '{}'                ifTrue: [ properties at: 'traitcomposition' put: property ] ].    definition classTraitCompositionString        ifNotNil: [ :property |             "Issue #48: https://github.com/dalehenrich/filetree/issues/48"            property ~= '{}'                ifTrue: [ properties at: 'classtraitcomposition' put: property ] ].    definition extraDependenciesString        ifNotNil: [ :property |             "Issue #48: https://github.com/dalehenrich/filetree/issues/48"            property ~= '{}'                ifTrue: [ properties at: 'extradependencies' put: property ] ].		    properties at: 'category' put: definition category.    properties at: 'instvars' put: definition instVarNames asArray.    properties at: 'classvars' put: definition classVarNames asArray.    properties at: 'pools' put: definition poolDictionaries asArray.    properties at: 'classinstvars' put: definition classInstVarNames asArray.    properties at: 'type' put: definition type asString.    properties at: 'commentStamp' put: definition commentStamp.    STON put: properties asJsonOnStreamPretty: fileStream! !!MCMethodDefinition methodsFor: 'comparing' stamp: 'RonieSalgado 6/11/2016 17:07'!= aDefinition	^ super = aDefinition		and: [ 			aDefinition category = self category				and: [ aDefinition source withSqueakLineEndings = self source withSqueakLineEndings					and: [ aDefinition compilationDependencies = self compilationDependencies ] ] ]! !!MCMethodDefinition methodsFor: 'comparing' stamp: 'RonieSalgado 6/11/2016 17:08'!hash	| hash |	hash := String stringHash: classIsMeta asString initialHash: 0.	hash := String stringHash: source initialHash: hash.	hash := String stringHash: category initialHash: hash.	hash := String stringHash: className initialHash: hash.	compilationDependencies ifNotNil: [ hash bitXor: compilationDependencies hash ].	^ hash! !!MCMethodDefinition methodsFor: 'storing' stamp: 'RonieSalgado 6/11/2016 16:54'!storeDataOn: aDataStream	| instVarSize |	instVarSize := (self hasCompilationDependencies)		ifTrue: [ self class instSize ]		ifFalse: [ self class instSize - 1 ].	aDataStream		beginInstance: self class		size: instVarSize.	1 to: instVarSize do: [ :index |		aDataStream nextPut: (self instVarAt: index) ].! !!MCMethodDefinition methodsFor: 'testing' stamp: 'RonieSalgado 6/11/2016 16:52'!hasCompilationDependencies	^ compilationDependencies ~~ nil! !!MCMethodDefinition methodsFor: 'installing' stamp: 'RonieSalgado 6/11/2016 21:05'!addMethodAdditionTo: aCollection	| methodAddition |	methodAddition := MethodAddition new		compile: source		classified: category		withStamp: timeStamp		notifying: nil		logSource: true		inClass: self actualClass.	"This might raise an exception and never return"	methodAddition createCompiledMethod.	methodAddition isEagerInstallingRequired ifTrue: [ methodAddition installMethod  ].	aCollection add: methodAddition.! !!MCMethodDefinition methodsFor: 'serializing' stamp: 'RonieSalgado 6/11/2016 16:53'!initializeWithClassName: classStringclassIsMeta: metaBooleanselector: selectorStringcategory: catStringtimeStamp: timeStringsource: sourceStringcompilationDependencies: compilationDependenciesArray	className := classString asSymbol.	selector := selectorString asSymbol.	category := catString asSymbol.	timeStamp := timeString.	classIsMeta := metaBoolean.	source := sourceString withSqueakLineEndings.	compilationDependencies := compilationDependenciesArray.! !!MCMethodDefinition methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 17:53'!provisions	^ Array with: (Array with: className with: classIsMeta with: selector)! !!MCMethodDefinition methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 17:11'!requirements	self hasCompilationDependencies ifTrue: [		^ (Array with: className) , compilationDependencies	].	^ Array with: className! !!MCMethodDefinition methodsFor: 'accessing' stamp: 'RonieSalgado 6/11/2016 16:55'!compilationDependencies	^ compilationDependencies! !!MCMethodDefinition class methodsFor: 'instance creation' stamp: 'RonieSalgado 6/11/2016 17:06'!className: classStringclassIsMeta: metaBooleanselector: selectorStringcategory: catStringtimeStamp: timeStringsource: sourceStringcompilationDependencies: compilationDependencies	^ self instanceLike:		(self new initializeWithClassName: classString					classIsMeta: metaBoolean					selector: selectorString					category: catString					timeStamp: timeString					source: sourceString					compilationDependencies: compilationDependencies)! !!MCMethodDefinition class methodsFor: 'instance creation' stamp: 'RonieSalgado 6/11/2016 17:05'!className: classStringclassIsMeta: metaBooleanselector: selectorStringcategory: catStringtimeStamp: timeStringsource: sourceString	^ self className: classString		classIsMeta: metaBoolean		selector: selectorString		category: catString		timeStamp: timeString		source: sourceString		compilationDependencies: nil! !!MCTraitDefinition methodsFor: 'comparing' stamp: 'RonieSalgado 6/11/2016 19:57'!= aDefinition	self flag: #traits. "Ugly we harcoded the super superclass method.  We will have to refactor the definition hierarchy"		^ (aDefinition isKindOf: MCDefinition)		and: [(self isRevisionOf: aDefinition)		and: [self traitCompositionString = aDefinition traitCompositionString		and: [self extraDependenciesString = aDefinition extraDependenciesString		and: [category = aDefinition category		and: [comment = aDefinition comment]]]]]! !!MCTraitDefinition methodsFor: 'comparing' stamp: 'RonieSalgado 6/11/2016 19:58'!hash	| hash |	hash := String stringHash: name initialHash: 0.	hash := String stringHash: self traitCompositionString initialHash: hash.	hash := String stringHash: self extraDependenciesString initialHash: hash.	hash := String stringHash: (category ifNil: ['']) initialHash: hash.	^ hash! !!MCTraitDefinition methodsFor: 'initializing' stamp: 'RonieSalgado 6/11/2016 19:58'!initializeWithName: classNameString 	traitComposition:  traitCompositionString	extraDependencies:  extraDependenciesString	category:  categoryString	comment:  commentString  	commentStamp:   commentStampString							name := classNameString asSymbol.		traitComposition := traitCompositionString.		extraDependencies := extraDependenciesString.	   category := categoryString.		comment := commentString withSqueakLineEndings.		commentStamp :=  commentStampString ifNil: [self defaultCommentStamp]! !!MCTraitDefinition class methodsFor: 'instance-creation' stamp: 'RonieSalgado 6/11/2016 19:51'!name: classNameString traitComposition:  traitCompositionString category:  categoryString comment:  commentString commentStamp:   commentStamp	^ self name: classNameString traitComposition:  traitCompositionString extraDependencies: '{}' category:  categoryString comment:  commentString commentStamp:   commentStamp! !!MCTraitDefinition class methodsFor: 'instance-creation' stamp: 'RonieSalgado 6/11/2016 19:51'!name: classNameString traitComposition:  traitCompositionString extraDependencies:  extraDependenciesString category:  categoryString comment:  commentString commentStamp:   commentStamp	^ self instanceLike:		(self new initializeWithName: classNameString 			traitComposition:  traitCompositionString			extraDependencies:  extraDependenciesString			category:  categoryString			comment:  commentString  			commentStamp:   commentStamp)! !!Metaclass methodsFor: 'dependencies' stamp: 'RonieSalgado 6/11/2016 19:08'!extraDependencies	^ #()! !!MethodAddition methodsFor: 'testing' stamp: 'RonieSalgado 6/11/2016 21:11'!isEagerInstallingRequired	^ compiledMethod propertyValueAt: #eagerInstallationRequired ifAbsent: [ ^ false ]! !!RGMethodDefinition methodsFor: '*Monticello' stamp: 'RonieSalgado 6/11/2016 16:50'!asMCMethodDefinitionFromActiveDefinition	"Creates a MCMethodDefinition from a source file assuming the current method isActive."	| compiledMethod methodClass|	compiledMethod := self compiledMethod.	methodClass := compiledMethod methodClass.	   ^ MCMethodDefinition		className: methodClass theNonMetaClass name 	   	classIsMeta: methodClass isMeta		selector: compiledMethod selector		category: compiledMethod category		timeStamp: compiledMethod timeStamp		source: compiledMethod sourceCode		compilationDependencies: compiledMethod compilationDependencies! !!Trait methodsFor: 'dependencies' stamp: 'RonieSalgado 6/11/2016 19:56'!extraDependencies	^ #()! !!Trait methodsFor: '*Monticello' stamp: 'RonieSalgado 6/11/2016 19:55'!asClassDefinition	^ MCTraitDefinition		name: self name		traitComposition: self traitCompositionString		extraDependencies: self extraDependenciesString		category: self category 		comment: self organization classComment asString		commentStamp: self organization commentStamp.! !!Trait reorganize!(#'*CodeExport' shouldFileOutPools fileOutOn: fileOut fileOutPool:onFileStream: fileOutOn:initializing: shouldFileOutPool: fileOutSharedPoolsOn: fileOutInitializerOn:)(#'subclass creation - private' subclass:uses:with:)(#'subclass creation - variableWord' variableWordSubclass:instanceVariableNames:classVariableNames:package: variableWordSubclass:uses:instanceVariableNames:classVariableNames:category: variableWordSubclass:uses:instanceVariableNames:classVariableNames:package: variableWordSubclass:instanceVariableNames:classVariableNames:category: variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: variableWordSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableWordSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:)(#'instance variables' removeInstVarNamed:)(#'*Polymorph-Widgets-Themes' systemIcon)(#traits applyChangesOfNewTraitCompositionReplacing:)(#'subclass creation - variable' variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: variableSubclass:uses:instanceVariableNames:classVariableNames:category: variableSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: variableSubclass:instanceVariableNames:classVariableNames:package: variableSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableSubclass:instanceVariableNames:classVariableNames:category: variableSubclass:uses:instanceVariableNames:classVariableNames:package:)(#'*GT-InspectorExtensions-Core' gtInspectorMethodsIn: gtInspectorCommentIn: gtInspectorAllReferencesOutsideIn: gtInspectorAllReferencesIn: gtInspectorDefinitionIn:)(#'*OpalCompiler-Core' classSideCompilerClass classSideCompiler)(#'accessing class hierarchy' subclassesDo: removeSubclass: subclasses: subclasses hasSubclasses addSubclass:)(#'class variables' writeClassVariableNamed:value: definesClassVariable: classVariableNamed: classVarNames definesClassVariableNamed: classVariables classVariableDefinitionString classVarNamed:put: readClassVariableNamed: usesClassVarNamed: allClassVarNames classVarNamed: removeClassVarNamed: addClassVarNamed: removeClassVariable: hasClassVarNamed: addClassVariable: hasClassVariable:)(#dependencies extraDependencies)(#'*GT-Inspector-Examples-UI' gtInspectorGTExamplesIn: gtSpotterGTExamplesFor:)(#compiling binding compileAllFrom: bindingOf: possibleVariablesFor:continuedFrom: compileAll innerBindingOf: reformatAll)(#'subclass creation - weak' weakSubclass:instanceVariableNames:classVariableNames:category: weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: weakSubclass:instanceVariableNames:classVariableNames:package: weakSubclass:uses:instanceVariableNames:classVariableNames:category: weakSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: weakSubclass:uses:instanceVariableNames:classVariableNames:package: weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: weakSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category:)(#'*Manifest-Core' criticTheNonMetaclassClass)(#testing isObsolete hasMethods isClassOrTrait isAnonymous hasAbstractMethods)(#'*System-Changes' removeFromChanges)(#'accessing parallel hierarchy' classTrait: isClassTrait baseTrait hasClassSide classTrait isBaseTrait)(#'subclass creation - slots' subclass:uses:slots:classVariables:poolDictionaries:category: subclass:uses:slots:classVariables:category: subclass:uses:layout:slots:classVariables:category: subclass:layout:slots:classVariables:category: subclass:slots:classVariables:poolDictionaries:category: subclass:layout:slots:classVariables:poolDictionaries:category: subclass:slots:classVariables:category: subclass:uses:layout:slots:classVariables:poolDictionaries:category:)(#'*Fuel' fuelAccept:)(#'*System-Settings' acceptSettings:)(#initialization initialize)(#'subclass creation - immediate' immediateSubclass:uses:instanceVariableNames:classVariableNames:package: immediateSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: immediateSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: immediateSubclass:instanceVariableNames:classVariableNames:package:)(#private getName setName: isValidTraitName: setName:andRegisterInCategory:environment:)(#'subclass creation' subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: subclass:uses: subclass:instanceVariableNames:classVariableNames:category: classBuilder subclass:uses:instanceVariableNames:classVariableNames:category: immediateByteSubclass:instanceVariableNames:classVariableNames:package: subclass:instanceVariableNames:classVariableNames:poolDictionaries:package: classInstaller subclass: private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: subclass:instanceVariableNames: subclass:instanceVariableNames:classVariableNames:package: subclass:uses:instanceVariableNames:classVariableNames:package: subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: newSubclass)(#'*Monticello' classDefinitions asClassDefinition)(#'*ston-core' stonOn:)(#'*GT-SpotterExtensions-Core' spotterClassMethodsFor: spotterReferenceFor: spotterSuperClassMethodsFor: spotterPreviewCodeIn: spotterMethodsFor: spotterSuperMethodsFor: spotterActDefault)(#viewer externalName)(#'self evaluating' isSelfEvaluating)(#'pool variables' usesLocalPoolVarNamed: sharedPools: allSharedPools usesPoolVarNamed: addSharedPool: hasSharedPools removeSharedPool: sharedPoolOfVarNamed: sharedPools)(#'class name' rename:)(#accessing environment classPool basicCategory classPool: basicCategory: environment: name name:)(#copying duplicateClassWithNewName: copy)(#'*Ring-Core-Kernel' asFullRingDefinition asRingDefinition asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackageKeys:in: asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackages:)(#organization category: category)(#'*HelpSystem-Core' asHelpTopic)(#'*FuelTests' renameSilently:)(#'subclass creation - variableByte' variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: variableByteSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableByteSubclass:instanceVariableNames:classVariableNames:package: variableByteSubclass:uses:instanceVariableNames:classVariableNames:category: variableByteSubclass:instanceVariableNames:classVariableNames:category:)(#'initialize-release' unload removeFromSystemUnlogged declareClassVariables: removeFromSystem sharing: obsolete name:traitComposition:methodDict:localSelectors:organization: superclass:methodDictionary:format: removeFromSystem: release)(#'*Slot' removeSlot:)!!MethodAddition reorganize!(#compilation compile:classified:withStamp:notifying:logSource:inClass: compile)(#testing isEagerInstallingRequired)(#accessing priorCategoryOrNil: priorCategoryOrNil)(#notifying notifyObservers)(#operations createCompiledMethod writeSourceToLog installMethod)!!Metaclass reorganize!(#testing isUsed isMeta isAnonymous isClass isObsolete isSelfEvaluating canZapMethodDictionary)(#'fileIn/Out' definition)(#'*OpalCompiler-Core' compilerClass compiler)(#composition noteNewBaseTraitCompositionApplied: assertConsistantCompositionsForNew: uses:)(#dependencies extraDependencies)(#'*Tools' canonicalArgumentName)(#'class hierarchy' subclassesDo: removeSubclass: subclasses addObsoleteSubclass: addSubclass: isMetaclassOfClassOrNil obsoleteSubclasses)(#'*Manifest-Core' criticTheNonMetaclassClass)(#'accessing instances and variables' classVarNames)(#'accessing hierarchy protocol' hasClassSide)(#'pool variables' sharedPools classPool)(#accessing basicLocalSelectors environment traitComposition category basicLocalSelectors: soleInstance traitComposition: name)(#'instance creation' new)(#'initialize-release' slots: uses:instanceVariableNames: instanceVariableNames: uses:slots: adoptInstance:from:)(#compiling binding bindingOf: wantsRecompilationProgressReported possibleVariablesFor:continuedFrom: acceptsLoggingOfCompilation wantsChangeSetLogging)(#'accessing parallel hierarchy' baseClass classClass)(#initialize initializeFrom:)(#copying veryDeepCopyWith: postCopy)(#'*Ring-Core-Kernel' asFullRingDefinition asRingDefinition)(#'*CodeExport' fileOutOn:initializing: fileOutOn: fileOutInitializerOn: nonTrivial)(#'instance variables' addSlot: removeInstVarNamed: addInstVarNamed:)(#'*Fuel' fuelAccept:)(#'*ston-core' stonOn: stonName)!MCTraitDefinition removeSelector: #initializeWithName:traitComposition:category:comment:commentStamp:!MCMethodDefinition removeSelector: #initializeWithClassName:classIsMeta:selector:category:timeStamp:source:!!MCMethodDefinition reorganize!(#comparing = hash sortKey)(#'*monticellofiletree-core' setTimeStamp:)(#storing storeDataOn:)(#'*Komitter-UI' addOperation:on: koClass)(#testing isLoadable hasCompilationDependencies isCodeDefinition isInitializer isMethodDefinition)(#annotations printAnnotations:on:)(#printing description summary fullClassName shortSummaryPrefix)(#installing unload isExtensionMethod addMethodAdditionTo: isOverrideMethod overridenMethodOrNil removeSelector:fromClass: isExternalStructureFieldDefinition postloadOver:)(#serializing initializeWithClassName:classIsMeta:selector:category:timeStamp:source:compilationDependencies:)(#accessing actualClass timeStamp className diffSource fullTimeStamp provisions selector source load requirements protocol classIsMeta compilationDependencies)(#'*Ring-Monticello' asRingDefinition)(#visiting accept:)(#'accessing-backward' category)!MCClassDefinition removeSelector: #initializeWithName:superclassName:traitComposition:classTraitComposition:category:instVarNames:classVarNames:poolDictionaryNames:classInstVarNames:type:comment:commentStamp:!!MCClassDefinition reorganize!(#annotations printAnnotations:on:)(#'*Komitter-UI' addOperation:on: koClass)(#installing variablesOfType: stringForVariablesOfType: usesSpecialVariables stringForSortedVariablesOfType: sortedVariablesOfType: load createClass unload)(#printing instanceVariables instanceVariablesString printDefinitionOn: definitionString classInstanceVariablesString printClassDefinitionOn: source classInstanceVariables printMetaDefinitionOn: classVariablesString summary sharedPoolsString kindOfSubclass classVariables)(#'*Ring-Monticello' asRingDefinition)(#storing storeDataOn:)(#comparing = requirements provisions hash)(#testing isClassDefinition hasTraitComposition hasExtraDependencies hasClassInstanceVariables hasComment isCodeDefinition hasClassTraitComposition)(#accessing category classInstVarNames extraDependenciesCompiled extraDependenciesString allClassDependencies extraDependencies classTraitCompositionCompiled traitCompositionString selectVariables: traitComposition superclassName classVarNames classTraitComposition poolDictionaries commentStamp className variables description classTraitCompositionString comment type classDefinitionString sortedVariables traitCompositionCompiled instVarNames sortKey actualClass)(#visiting accept:)(#initializing initializeWithName:superclassName:traitComposition:classTraitComposition:extraDependencies:category:instVarNames:classVarNames:poolDictionaryNames:classInstVarNames:type:comment:commentStamp: defaultCommentStamp addVariables:ofType: initializeWithName:superclassName:category:instVarNames:classVarNames:poolDictionaryNames:classInstVarNames:type:comment:commentStamp:)!!Class reorganize!(#'class variables' writeClassVariableNamed:value: definesClassVariable: classVariableNamed: classVarNames definesClassVariableNamed: classVariables classVariableDefinitionString classVarNamed:put: readClassVariableNamed: usesClassVarNamed: allClassVarNames classVarNamed: removeClassVarNamed: addClassVarNamed: removeClassVariable: hasClassVarNamed: addClassVariable: hasClassVariable:)(#compiling binding compileAllFrom: bindingOf: possibleVariablesFor:continuedFrom: compileAll innerBindingOf: reformatAll)(#'accessing parallel hierarchy' baseClass hasClassSide classClass)(#'instance variables' addSlot: removeInstVarNamed: addInstVarNamed:)(#copying duplicateClassWithNewName: copy)(#'subclass creation - weak' weakSubclass:instanceVariableNames:classVariableNames:category: weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: weakSubclass:instanceVariableNames:classVariableNames:package: weakSubclass:uses:instanceVariableNames:classVariableNames:category: weakSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: weakSubclass:uses:instanceVariableNames:classVariableNames:package: weakSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: weakSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category:)(#'subclass creation - slots' subclass:uses:slots:classVariables:poolDictionaries:category: subclass:uses:slots:classVariables:category: subclass:uses:layout:slots:classVariables:category: subclass:layout:slots:classVariables:category: subclass:slots:classVariables:poolDictionaries:category: subclass:layout:slots:classVariables:poolDictionaries:category: subclass:slots:classVariables:category: subclass:uses:layout:slots:classVariables:poolDictionaries:category:)(#'*Manifest-Core' criticTheNonMetaclassClass)(#'class name' rename:)(#'pool variables' usesLocalPoolVarNamed: sharedPools: allSharedPools usesPoolVarNamed: addSharedPool: hasSharedPools removeSharedPool: sharedPoolOfVarNamed: sharedPools)(#'*GT-Inspector-Examples-UI' gtInspectorGTExamplesIn: gtSpotterGTExamplesFor:)(#'self evaluating' isSelfEvaluating)(#'subclass creation - immediate' immediateSubclass:uses:instanceVariableNames:classVariableNames:package: immediateSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: immediateSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: immediateSubclass:instanceVariableNames:classVariableNames:package:)(#'*GT-SpotterExtensions-Core' spotterClassMethodsFor: spotterReferenceFor: spotterSuperClassMethodsFor: spotterPreviewCodeIn: spotterMethodsFor: spotterSuperMethodsFor: spotterActDefault)(#'subclass creation' subclass:uses: subclass:instanceVariableNames:classVariableNames:category: subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: classBuilder subclass:uses:instanceVariableNames:classVariableNames:category: immediateByteSubclass:instanceVariableNames:classVariableNames:package: subclass:instanceVariableNames:classVariableNames:poolDictionaries:package: classInstaller private_subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: subclass: subclass:instanceVariableNames: subclass:instanceVariableNames:classVariableNames:package: subclass:uses:instanceVariableNames:classVariableNames:package: subclass:instanceVariableNames:classVariableNames:poolDictionaries:category: subclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: newAnonymousSubclass newSubclass)(#'subclass creation - variableWord' variableWordSubclass:instanceVariableNames:classVariableNames:package: variableWordSubclass:uses:instanceVariableNames:classVariableNames:category: variableWordSubclass:uses:instanceVariableNames:classVariableNames:package: variableWordSubclass:instanceVariableNames:classVariableNames:category: variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: variableWordSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: variableWordSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableWordSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package:)(#'*FuelTests' renameSilently:)(#'initialize-release' unload removeFromSystemUnlogged declareClassVariables: removeFromSystem sharing: obsolete name:traitComposition:methodDict:localSelectors:organization: superclass:methodDictionary:format: removeFromSystem: release)(#dependencies extraDependencies)(#'accessing class hierarchy' subclassesDo: removeSubclass: subclasses: subclasses hasSubclasses addSubclass:)(#'*GT-InspectorExtensions-Core' gtInspectorMethodsIn: gtInspectorCommentIn: gtInspectorAllReferencesOutsideIn: gtInspectorAllReferencesIn: gtInspectorDefinitionIn:)(#'subclass creation - private' subclass:uses:with:)(#'*Lowcode-TypeSystem' asLowcodeType asLowcodeTypeAtEnvironment:)(#'*System-Settings' acceptSettings:)(#viewer externalName)(#'*ston-core' stonOn:)(#'*HelpSystem-Core' asHelpTopic)(#'*System-Changes' removeFromChanges)(#'*Fuel' fuelAccept:)(#'*OpalCompiler-Core' classSideCompilerClass classSideCompiler)(#'*Monticello' classDefinitions asClassDefinition)(#organization category: environment: category environment)(#testing isObsolete isAnonymous isClass isClassOrTrait hasAbstractMethods hasMethods)(#'*Slot' removeSlot:)(#private name: setName: addClassSlot: isValidTraitName: setName:andRegisterInCategory:environment: getName)(#'*Nautilus' definitionForNautilus definitionForNautilusWithSlots)(#traits applyChangesOfNewTraitCompositionReplacing:)(#'subclass creation - variableByte' variableByteSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: variableByteSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableByteSubclass:instanceVariableNames:classVariableNames:package: variableByteSubclass:uses:instanceVariableNames:classVariableNames:category: variableByteSubclass:instanceVariableNames:classVariableNames:category:)(#'subclass creation - variable' variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:package: variableSubclass:uses:instanceVariableNames:classVariableNames:category: variableSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:package: variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category: variableSubclass:instanceVariableNames:classVariableNames:package: variableSubclass:uses:instanceVariableNames:classVariableNames:poolDictionaries:category: variableSubclass:instanceVariableNames:classVariableNames:category: variableSubclass:uses:instanceVariableNames:classVariableNames:package:)(#accessing basicCategory basicLocalSelectors: classPool traitComposition basicCategory: traitComposition: basicLocalSelectors classPool: name)(#'*Ring-Core-Kernel' asFullRingDefinition asRingDefinition asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackageKeys:in: asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackages:)(#'*CodeExport' shouldFileOutPools fileOutOn: fileOut fileOutPool:onFileStream: fileOutOn:initializing: shouldFileOutPool: fileOutSharedPoolsOn: fileOutInitializerOn:)!