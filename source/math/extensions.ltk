Number category: '*WodenMath-Core' methods: {
:[asFloatFromNormalizedUShort
	^ self asFloat / 65535.0
].

:[asFloatFromNormalizedUByte
	^ self asFloat / 255.0
].

:[asFloatFromNormalizedSShort
	^ self asFloat / 16r7FFF.0 min: 1.0 max: -1.0
].

:[asFloatFromNormalizedSByte
	^ self asFloat / 16r7F min: 1.0 max: -1.0
].

:[asWMComplexF -> WMComplexF.
	^ WMComplexF r: (self asFloat castTo: Float32)
].

:[asWMComplexD -> WMComplexD.
	^ WMComplexD r: (self asFloat castTo: Float64)
].

:[reciprocalFloatQuiet
	self = 0 ifTrue: [ ^ self sign < 0 ifTrue: [ Float negativeInfinity ] ifFalse: [ Float infinity ] ].
	^ (1.0 castTo: _DynamicObject) / self
].

}.

Float category: '*WodenMath-Core' methods: {
:[asNormalizedUByte
	^ (self * 16rFF) asInteger min: 16rFF max: 0
].

:[asNormalizedSByte
	^ (self * 16r7F) asInteger bitAnd: 16rFF
].

:[asNormalizedUShort
	^ (self * 16rFFFF) asInteger min: 16rFFFF max: 0
].

:[asNormalizedShort
	^ (self * 16r7FFF) asInteger bitAnd: 16rFFFF
].

:[encodeSRGBComponent
	"
	From: https://en.wikipedia.org/wiki/SRGB
	"
	| a |
	a := 0.055.
	^ self <= 0.0031308 ifTrue: [ self * 12.92 ] ifFalse: [ ((1.0 + a) * (self raisedTo: 1.0 / 2.4)) - a ]
].

:[decodeSRGBComponent
	"
	From: https://en.wikipedia.org/wiki/SRGB
	"
	| a |
	a := 0.055.
	^ self <= 0.04045 ifTrue: [ self / 12.92 ] ifFalse: [ ((self + a) / (1.0 + a)) raisedTo: 2.4 ]
].

}.

Color category: '*WodenMath-Core' methods: {
:[asWMVector4D -> WMVector4D.
	^ WMVector4D
		x: (self red decodeSRGBComponent castTo: Float64)
		y: (self green decodeSRGBComponent castTo: Float64)
		z: (self blue decodeSRGBComponent castTo: Float64)
		w: (self alpha castTo: Float64)
].

:[asWMVector4F -> WMVector4F.
	^ WMVector4F
		x: (self red decodeSRGBComponent castTo: Float32)
		y: (self green decodeSRGBComponent castTo: Float32)
		z: (self blue decodeSRGBComponent castTo: Float32)
		w: (self alpha castTo: Float32)
].

:[asWodenJsonData
	^ '#' , self asHexString
].

}.

Color class category: '*WodenMath-Core' methods: {
:[loadWodenJsonData: jsonData
	jsonData isString ifTrue: [ ^ self fromString: jsonData ].
	^ WMVector4F loadFromJson: jsonData
]
}.

Point category: '*WodenMath-Core' methods: {
:[asWMComplexF -> WMComplexF.
	^ WMComplexF r: (x castTo: Float32) i: (y castTo: Float32)
].

:[asWMComplexD -> WMComplexD.
	^ WMComplexD r: (x castTo: Float64) i: (y castTo: Float64)
].

:[asWMVector2F -> WMVector2F.
	^ WMVector2F x: (x castTo: Float32) y: (y castTo: Float32)
].

:[asWMVector2D -> WMVector2D.
	^ WMVector2D x: (x castTo: Float64) y: (y castTo: Float64)
].

}.

Rectangle category: '*WodenMath-Core' methods: {
:[asWMBox2DF -> WMBox2DF.
	^ WMBox2DF min: (origin asWMVector2F castTo: WMVector2F) max: (corner asWMVector2F castTo: WMVector2F)
].

:[asWMBox2DD -> WMBox2DD.
	^ WMBox2DD min: (origin asWMVector2D castTo: WMVector2D) max: (corner asWMVector2D castTo: WMVector2D)
].
}.
