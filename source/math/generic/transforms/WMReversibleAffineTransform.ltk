WMReversibleAffineTransform class category: 'instance creation' methods: {
:[identity -> WMReversibleAffineTransform.
    <inline>
	^ WMReversibleAffineTransform newValue setIdentity
].
}.

WMReversibleAffineTransform class category: 'serialization' methods: {
:[loadFromJson: json -> WMReversibleAffineTransform.
	^ WMReversibleAffineTransform newValue
		matrix: (WMMatrix3 newFrom: (json at: 'matrix'));
		inverseMatrix: (WMMatrix3 newFrom: (json at: 'inverse-matrix'));
		translation4: (WMVector4 xyz: (WMVector3 loadFromJson: (json at: 'translation')) w: 1.0);
		inverseTranslation4: (WMVector4 xyz: (WMVector3 loadFromJson: (json at: 'inverse-translation')) w: 1.0);
		yourself
].

}.

WMReversibleAffineTransform category: 'initialization' methods: {
:[initialize
    <inline>
	translation4 w := 1.0.
	inverseTranslation4 w := 1.0.
].

}.

WMReversibleAffineTransform category: 'accessing' methods: {
:[translation -> WMVector3.
    <inline>
	^ translation4 xyz
].

:[translation: <WMVector3> vector3
    <inline>
	translation4 x := vector3 x.
	translation4 y := vector3 y.
	translation4 z := vector3 z.
	inverseTranslation4 := inverseMatrix transformVector4: translation4 negatedVec3.
].

:[inverseTranslation -> WMVector3.
    <inline>
	^ inverseTranslation4 xyz
].

:[orthonormal: <WMMatrix3> newMatrix
    <inline>
	matrix := newMatrix.
	inverseMatrix := newMatrix transposed.

	"Recompute the inverse translation"
	inverseTranslation4 := inverseMatrix transformVector4: translation4 negatedVec3.
].

:[orthonormal: <WMMatrix3> newMatrix translation: <WMVector3> vector3
    <inline>
	matrix := newMatrix.
	inverseMatrix := newMatrix transposed.
	translation4 x: vector3 x.
	translation4 y: vector3 y.
	translation4 z: vector3 z.
	inverseTranslation4 := inverseMatrix transformVector4: translation4 negatedVec3.
].

}.

WMReversibleAffineTransform category: 'converting' methods: {
:[asJsonData -> _DynamicObject.
	^ OrderedDictionary new
		at: 'matrix' put: matrix asJsonData;
		at: 'translation' put: self translation asJsonData;
		at: 'inverse-matrix' put: inverseMatrix asJsonData;
		at: 'inverse-translation' put: self inverseTranslation asJsonData
].

:[matrix4 -> WMMatrix4.
    <inline>
	^ WMMatrix4 mat3: matrix translation4: translation4
].

:[inverseMatrix4 -> WMMatrix4.
    <inline>
	^ WMMatrix4 mat3: inverseMatrix translation4: inverseTranslation4
].

:[asWMReversibleAffineTransform -> WMReversibleAffineTransform.
    <inline>
	^ self
].

:[asWMReversibleAffineTransformF -> WMReversibleAffineTransformF.
    <inline>
	^ WMReversibleAffineTransformF newValue
		matrix: matrix asWMMatrix3F;
		translation4: translation4 asWMVector4F;
		inverseMatrix: inverseMatrix asWMMatrix3F;
		inverseTranslation4: inverseTranslation4 asWMVector4F;
		yourself
].

:[asWMReversibleAffineTransformD -> WMReversibleAffineTransformD.
    <inline>
	^ WMReversibleAffineTransformD newValue
		matrix: matrix asWMMatrix3D;
		translation4: translation4 asWMVector4D;
		inverseMatrix: inverseMatrix asWMMatrix3D;
		inverseTranslation4: inverseTranslation4 asWMVector4D;
		yourself
].

}.

WMReversibleAffineTransform category: 'special orientations' methods: {
:[lookAtBack
	self orthonormal: WMMatrix3 lookAtBack
].

:[lookAtBottom
	self orthonormal: WMMatrix3 lookAtBottom
].

:[lookAtFront
	self orthonormal: WMMatrix3 lookAtFront
].

:[lookAtLeft
	self orthonormal: WMMatrix3 lookAtLeft
].

:[lookAtRight
	self orthonormal: WMMatrix3 lookAtRight
].

:[lookAtTop
	self orthonormal: WMMatrix3 lookAtTop
].

}.

WMReversibleAffineTransform category: 'transformation building' methods: {
:[applyMatrix: <WMMatrix3> extraMatrix matrixInverse: <WMMatrix3> extraMatrixInverse
    <inline>
	matrix := extraMatrix * matrix.
	inverseMatrix := inverseMatrix * extraMatrixInverse.
	translation4 := extraMatrix transformVector4: translation4.
	inverseTranslation4 := extraMatrixInverse transformVector4: inverseTranslation4"inverseMatrix transformVector4: translation negatedVec3."
].

:[applyOrthonormalMatrix: <WMMatrix3> orthonomal
    <inline>
	self applyMatrix: orthonomal matrixInverse: orthonomal transposed
].

:[rotateDegreesOnX: <Scalar> x
	self rotateRadiansOnX: (x degreesToRadians castTo: Scalar)
].

:[rotateDegreesOnY: <Scalar> y
	self rotateRadiansOnY: (y degreesToRadians castTo: Scalar)
].

:[rotateDegreesOnZ: <Scalar> z
	self rotateRadiansOnZ: (z degreesToRadians castTo: Scalar)
].

:[rotateDegreesOnZ: <Scalar> z y: <Scalar> y x: <Scalar> x
	self rotateRadiansOnZ: (z degreesToRadians castTo: Scalar) y: (y degreesToRadians castTo: Scalar) x: (x degreesToRadians castTo: Scalar)
].

:[rotateRadiansOnX: <Scalar> x
	self applyOrthonormalMatrix: (WMMatrix3 xrot: x)
].

:[rotateRadiansOnY: <Scalar> y
	self applyOrthonormalMatrix: (WMMatrix3 yrot: y)
].

:[rotateRadiansOnZ: <Scalar> z
	self applyOrthonormalMatrix: (WMMatrix3 zrot: z)
].

:[rotateRadiansOnZ: <Scalar> z y: <Scalar> y x: <Scalar> x
	self applyOrthonormalMatrix: (WMMatrix3 zrot: z) * (WMMatrix3 yrot: y) * (WMMatrix3 xrot: x)
].

:[scaleBy: vectorOrScalar
	vectorOrScalar isNumber
		ifTrue: [ self scaleByX: (vectorOrScalar castTo: Scalar) y: (vectorOrScalar castTo: Scalar) z: (vectorOrScalar castTo: Scalar) ]
		ifFalse: [ self scaleByX: (vectorOrScalar x castTo: Scalar) y: (vectorOrScalar y castTo: Scalar) z: (vectorOrScalar z castTo: Scalar) ]
].

:[scaleByVector: <WMVector3> vector
    <inline>
	self scaleByX: (vector x castTo: Scalar) y: (vector y castTo: Scalar) z: (vector z castTo: Scalar)
].

:[scaleByX: <Scalar> x y: <Scalar> y z: <Scalar> z
    <inline>
	self applyMatrix: (WMMatrix3 scaleX: x y: y z: z)
		matrixInverse: (WMMatrix3
			scaleX: (x reciprocalFloatQuiet castTo: Scalar)
			y: (y reciprocalFloatQuiet castTo: Scalar)
			z: (z reciprocalFloatQuiet castTo: Scalar)
		)
].

:[setForBox: <WMBox3D> aBox
    <inline>
	self setIdentity;
		scaleByVector: aBox extent;
		translateTo: aBox center
].

:[setIdentity
    <inline>
	inverseMatrix := matrix := WMMatrix3 identity.
	inverseTranslation4 := translation4 := WMVector4 w: 1.0
].

:[translateBy: <WMVector3> vector3
    <inline>
	self translation: (WMVector3 x: translation4 x + vector3 x y: translation4 y + vector3 y z: translation4 z + vector3 z)
].

:[translateByX: <Scalar> x
    <inline>
	self translation: (WMVector3 x: x + translation4 x y: translation4 y z: translation4 z)
].

:[translateByY: <Scalar> y
    <inline>
	self translation: (WMVector3 x: translation4 x y: y + translation4 y z: translation4 z)
].

:[translateByZ: <Scalar> z
    <inline>
	self translation: (WMVector3 x: translation4 x y: translation4 y z: z + translation4 z)
].

:[translateByX: <Scalar> x y: <Scalar> y z: <Scalar> z
    <inline>
	self translation: (WMVector3 x: x + translation4 x y: y + translation4 y z: z + translation4 z)
].

:[translateTo: <WMVector3> vector3
    <inline>
	self translation: vector3
].

:[translateToX: <Scalar> x y: <Scalar> y z: <Scalar> z
    <inline>
	self translation: (WMVector3 x: x y: y z: z)
].

}.

WMReversibleAffineTransform category: 'transformations' methods: {
:[inverseTransformPosition3: <WMVector3> aVector3 -> WMVector3.
	^ (inverseMatrix transformPosition3: aVector3) + inverseTranslation4 xyz.
].

:[inverseTransformVector3: <WMVector3> aVector3 -> WMVector3.
	^ inverseMatrix transformVector3: aVector3
].

:[transformNormal: <WMVector3> aNormal -> WMVector3.
	^ inverseMatrix transposedTransformVector3: aNormal
].

:[transformPosition3: <WMVector3> aVector3 -> WMVector3.
	^ (matrix transformPosition3: aVector3) + translation4 xyz.
].

:[transformTransform: <WMReversibleAffineTransform>transform -> WMReversibleAffineTransform.
	^ WMReversibleAffineTransform newValue
		initialize;
		matrix: matrix * transform matrix;
		inverseMatrix: transform inverseMatrix * inverseMatrix;
		translation: self translation + (matrix transformVector3: transform translation);
		yourself
].

:[transformVector3: <WMVector3> aVector3 -> WMVector3.
	^ matrix transformVector3: aVector3
].

}.
