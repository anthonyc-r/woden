WMVector4 class category: 'construction' methods: {
:[x: <Scalar>x -> WMVector4.
	^ WMVector4 newValue
		x: x;
		yourself
].

:[y: <Scalar>y -> WMVector4.
	^ WMVector4 newValue
		y: y;
		yourself
].

:[z: <Scalar>z -> WMVector4.
	^ WMVector4 newValue
		z: z;
		yourself
].

:[w: <Scalar>w -> WMVector4.
	^ WMVector4 newValue
		w: w;
		yourself
].

:[x: <Scalar>x y: <Scalar>y -> WMVector4.
	^ WMVector4 newValue
		x: x;
		y: y;
		yourself
].

:[x: <Scalar>x y: <Scalar>y z: <Scalar>z -> WMVector4.
	^ WMVector4 newValue
		x: x;
		y: y;
		z: z;
		yourself
].

:[x: <Scalar>x y: <Scalar>y z: <Scalar>z w: <Scalar>w -> WMVector4.
	^ WMVector4 newValue
		x: x;
		y: y;
		z: z;
		w: w;
		yourself
].

:[xyz: <WMVector3> xyz w: <Scalar>w -> WMVector4.
	^ WMVector4 newValue
		x: xyz x;
		y: xyz y;
		z: xyz z;
		w: w;
		yourself
].

:[infinity -> WMVector4.
	let v := Float infinity castTo: Scalar.
	^ WMVector4 x: v y: v z: v w: v
].

:[negativeInfinity -> WMVector4.
	let v := Float negativeInfinity castTo: Scalar.
	^ WMVector4 x: v y: v z: v w: v
].

:[zero -> WMVector4.
	^ WMVector4 newValue
].

}.

WMVector4 class category: 'serialization' methods: {
:[loadFromJson: data -> WMVector4.
	^ WMVector4 x: ((data at: 1) castTo: Scalar) y: ((data at: 2) castTo: Scalar) z: ((data at: 3) castTo: Scalar) w: ((data at: 4) castTo: Scalar)
].
}.

WMVector4 category: 'accessing' methods: {
:[set: <WMVector4> other
	x := other x.
	y := other y.
	z := other z.
	w := other w.
]
}.

WMVector4 category: 'accessing' methods: {
:[xyz -> WMVector3.
	^ WMVector3 x: x y: y z: z
].
}.

WMVector4 category: 'arithmetic' methods: {
:[+ <WMVector4> other -> WMVector4.
	^ WMVector4 x: x + other x y: y + other y z: z + other z w: w + other w
].

:[- <WMVector4> other -> WMVector4.
	^ WMVector4 x: x - other x y: y - other y z: z - other z w: w - other w
].

:[* other -> WMVector4.
	^ other isNumber ifTrue: [
		self scale: (other castTo: Scalar)
	] ifFalse: [
		self multiplyWithVector: (other castTo: WMVector4)
	]
].

:[scale: <Scalar> scalar -> WMVector4.
	^ WMVector4 x: x * scalar y: y * scalar z: z * scalar w: w * scalar
].

:[multiplyWithVector: <WMVector4> other -> WMVector4.
	^ WMVector4 x: x * other x y: y * other y z: z * other z w: w * other w
].

:[/ other -> WMVector4.
	^ other isNumber ifTrue: [
		self inverseScale: (other castTo: Scalar)
	] ifFalse: [
		self divideWithVector: (other castTo: WMVector4)
	]
].

:[inverseScale: <Scalar> scalar -> WMVector4.
	^ WMVector4 x: x / scalar y: y / scalar z: z / scalar w: w / scalar
].

:[divideWithVector: <WMVector4> other -> WMVector4.
	^ WMVector4 x: x / other x y: y / other y z: z / other z w: w / other w
].

:[dot: <WMVector4> other -> Scalar.
	^ (x * other x) + (y * other y) + (z * other z) + (w * other w)
].

:[length2 -> Scalar.
	^ (x * x) + (y * y) + (z * z) + (w * w)
].

:[length -> Scalar.
	^ ((x * x) + (y * y) + (z * z) + (w * w)) sqrt
].

:[normalized -> WMVector4.
	let l := self length.
	^ l > 0.00001 ifTrue: [
		WMVector4 x: x / l y: y / l z: z / l w: w / l
	] ifFalse: [
		WMVector4 newValue
	]
].

:[negated -> WMVector4.
	^ WMVector4 x: x negated y: y negated z: z negated w: w negated
].

:[negatedVec3 -> WMVector4.
	^ WMVector4 x: x negated y: y negated z: z negated w: w
].

}.

WMVector4 category: 'comparing' methods: {
:[= other -> BooleanBit.
	^ WMVector4 == other class and: [x = other x and: [y = other y and: [z = other z and: [w = other w]]]]
].

:[hash -> _DynamicObject.
	^ (x hash bitXor: y hash) bitXor: z hash
].

:[closeTo: <WMVector4> other -> BooleanBit.
	^ (x closeTo: other x) and: [(y closeTo: other y) and: [(z closeTo: other z) and: [w closeTo: other w]]]
].
}.

WMVector4 category: 'converting' methods: {
:[asJsonData -> _DynamicObject.
	^ { x . y . z }
].

:[asColor -> _DynamicObject.
	^ Color r: x encodeSRGBComponent g: y encodeSRGBComponent b: z encodeSRGBComponent alpha: w
].

:[asWMVector4 -> WMVector4.
	^ self
].

:[asWMVector4D -> WMVector4D.
	^ WMVector4D x: x y: y z: z w: w
].

:[asWMVector4F -> WMVector4F.
	^ WMVector4F x: (x castTo: Float32) y: (y castTo: Float32) z: (z castTo: Float32) w: (w castTo: Float32)
].

:[asWMVector4USN -> WMVector4US.
	^ WMVector4US
		x: (x asNormalizedUShort castTo: UInt16)
		y: (y asNormalizedUShort castTo: UInt16)
		z: (z asNormalizedUShort castTo: UInt16)
		w: (w asNormalizedUShort castTo: UInt16) 
].

}.

WMVector4 category: 'printing' methods: {
:[printOn: aStream
	aStream nextPutAll: WMVector4 name;
		nextPutAll: ' x: '; print: x;
		nextPutAll: ' y: '; print: y;
		nextPutAll: ' z: '; print: z;
		nextPutAll: ' w: '; print: w.
].
}.
