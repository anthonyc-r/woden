WMMatrix3 class category: 'construction' methods: {
:[zeros -> WMMatrix3.
	^ WMMatrix3 newValue

].

:[ones -> WMMatrix3.
	^ WMMatrix3 newValue
		m11: 1.0; m12: 1.0; m13: 1.0;
		m21: 1.0; m22: 1.0; m23: 1.0;
		m31: 1.0; m32: 1.0; m33: 1.0;
		yourself
].

:[identity -> WMMatrix3.
	^ WMMatrix3 newValue
		m11: 1.0; m22: 1.0; m33: 1.0;
		yourself
].

:[scaleX: <Scalar> x y: <Scalar> y z: <Scalar> z-> WMMatrix3.
	^ WMMatrix3 newValue
		m11:   x; m12: 0.0; m13: 0.0;
		m21: 0.0; m22:   y; m23: 0.0;
		m31: 0.0; m32: 0.0; m33:   z;
		yourself
].

:[m11: <Scalar> m11 m12: <Scalar> m12 m13: <Scalar> m13
  m21: <Scalar> m21 m22: <Scalar> m22 m23: <Scalar> m23
  m31: <Scalar> m31 m32: <Scalar> m32 m33: <Scalar> m33 -> WMMatrix3.
	^ WMMatrix3 newValue
		m11: m11; m12: m12; m13: m13;
		m21: m21; m22: m22; m23: m23;
		m31: m31; m32: m32; m33: m33;
		yourself
].

:[xrot: angle -> WMMatrix3.
	let cos := angle cos castTo: Scalar.
	let sin := angle sin castTo: Scalar.
	^ WMMatrix3 newValue
		m11: 1.0; m12: 0.0; m13: 0.0;
		m21: 0.0; m22: cos; m23: sin negated;
		m31: 0.0; m32: sin; m33: cos;
		yourself
].

:[yrot: angle -> WMMatrix3.
	let cos := angle cos castTo: Scalar.
	let sin := angle sin castTo: Scalar.
	^ WMMatrix3 newValue
		m11: cos; m12: 0.0; m13: sin;
		m21: 0.0; m22: 1.0; m23: 0.0;
		m31: sin negated; m32: 0.0; m33: cos;
		yourself
].

:[zrot: angle -> WMMatrix3.
	let cos := angle cos castTo: Scalar.
	let sin := angle sin castTo: Scalar.
	^ WMMatrix3 newValue
		m11: cos; m12: sin negated; m13: 0.0;
		m21: sin; m22: cos; m23: 0.0;
		m31: 0.0; m32: 0.0; m33: 1.0;
		yourself
].
}.

WMMatrix3 category: 'arithmetic' methods: {
:[+ <WMMatrix3> other -> WMMatrix3.
	^ WMMatrix3 newValue
		m11: m11 + other m11; m12: m12 + other m12; m13: m13 + other m13;
		m21: m21 + other m21; m22: m22 + other m22; m23: m23 + other m23;
		m31: m31 + other m31; m32: m32 + other m32; m33: m33 + other m33;
		yourself
].

:[- <WMMatrix3> other -> WMMatrix3.
	^ WMMatrix3 newValue
		m11: m11 - other m11; m12: m12 - other m12; m13: m13 - other m13;
		m21: m21 - other m21; m22: m22 - other m22; m23: m23 - other m23;
		m31: m31 - other m31; m32: m32 - other m32; m33: m33 - other m33;
		yourself
].

:[* <WMMatrix3> other -> WMMatrix3.
	^ WMMatrix3 newValue
		m11: (m11 * other m11) + (m12 * other m21) + (m13 * other m31);
		m12: (m11 * other m12) + (m12 * other m22) + (m13 * other m32);
		m13: (m11 * other m13) + (m12 * other m23) + (m13 * other m33);
		
		m21: (m21 * other m11) + (m22 * other m21) + (m23 * other m31);
		m22: (m21 * other m12) + (m22 * other m22) + (m23 * other m32);
		m23: (m21 * other m13) + (m22 * other m23) + (m23 * other m33);
		
		m31: (m31 * other m11) + (m32 * other m21) + (m33 * other m31);
		m32: (m31 * other m12) + (m32 * other m22) + (m33 * other m32);
		m33: (m31 * other m13) + (m32 * other m23) + (m33 * other m33);
		yourself
].

:[transposed -> WMMatrix3.
	^ WMMatrix3 newValue
		m11: m11; m12: m21; m13: m31;
		m21: m12; m22: m22; m23: m32;
		m31: m13; m32: m23; m33: m33;
		yourself
].
}.

WMMatrix3 category: 'comparing' methods: {
:[= other -> BooleanBit.
	^ WMMatrix3 == other class and:  
		[ (m11 = other m11) and:
		[ (m12 = other m12) and:
		[ (m13 = other m13) and:
		
		[ (m21 = other m21) and:
		[ (m22 = other m22) and:
		[ (m23 = other m23) and:

		[ (m31 = other m31) and:
		[ (m32 = other m32) and:
		[ (m33 = other m33) ]]]]]]]]]
].

:[closeTo: other -> BooleanBit.
	^ (m11 closeTo: other m11) and:
		[ (m12 closeTo: other m12) and:
		[ (m13 closeTo: other m13) and:
		
		[ (m21 closeTo: other m21) and:
		[ (m22 closeTo: other m22) and:
		[ (m23 closeTo: other m23) and:

		[ (m31 closeTo: other m31) and:
		[ (m32 closeTo: other m32) and:
		[ (m33 closeTo: other m33) ]]]]]]]]
].

:[hash -> _DynamicObject.
	^ WMMatrix3 identityHash  bitXor:
		( m11 hash bitXor:
		( m12 hash bitXor:
		( m13 hash bitXor:
		
		( m21 hash bitXor:
		( m22 hash bitXor:
		( m23 hash bitXor:
		
		( m31 hash bitXor:
		( m32 hash bitXor:
		( m33 hash )))))))))
].
}.

WMMatrix3 category: 'converting' methods: {
:[asColumnMajorFloatArray -> _DynamicObject.
	| result |
	result := FloatArray new: 9.
	result
		at: 1 put: m11;
		at: 2 put: m21;
		at: 3 put: m31;
		
		at: 4 put: m12;
		at: 5 put: m22;
		at: 6 put: m32;
		
		at: 7 put: m13;
		at: 8 put: m23;
		at: 9 put: m33.
	^ result
].

:[asJsonData -> _DynamicObject.
	^ self asRowMajorArray 
].

:[asRowMajorArray -> _DynamicObject.
	| result |
	result := Array new: 9.
	result
		at: 1 put: m11;
		at: 2 put: m12;
		at: 3 put: m13;
		
		at: 4 put: m21;
		at: 5 put: m22;
		at: 6 put: m23;
		
		at: 7 put: m31;
		at: 8 put: m32;
		at: 9 put: m33.
	^ result
].

:[asRowMajorFloatArray -> _DynamicObject.
	| result |
	result := FloatArray new: 9.
	result
		at: 1 put: m11;
		at: 2 put: m12;
		at: 3 put: m13;
		
		at: 4 put: m21;
		at: 5 put: m22;
		at: 6 put: m23;
		
		at: 7 put: m31;
		at: 8 put: m32;
		at: 9 put: m33.
	^ result
].
}.

WMMatrix3 category: 'printing' methods: {
:[printOn: aStream
	aStream nextPutAll: WMMatrix3 name; nextPutAll: ' newFrom: #('; cr;
		tab; print: m11; space; print: m12; space; print: m13; cr;
		tab; print: m21; space; print: m22; space; print: m23; cr;
		tab; print: m31; space; print: m32; space; print: m33; cr;
		nextPut: $)
]
}.
