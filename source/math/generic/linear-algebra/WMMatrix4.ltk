WMMatrix4 class category: 'construction' methods: {
:[newFrom: anArray -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: ((anArray at: 1) castTo: Scalar); m12: ((anArray at: 2) castTo: Scalar); m13: ((anArray at: 3) castTo: Scalar); m14: ((anArray at: 4) castTo: Scalar);
		m21: ((anArray at: 5) castTo: Scalar); m22: ((anArray at: 6) castTo: Scalar); m23: ((anArray at: 7) castTo: Scalar); m24: ((anArray at: 8) castTo: Scalar);
		m31: ((anArray at: 9) castTo: Scalar); m32: ((anArray at: 10) castTo: Scalar); m33: ((anArray at: 11) castTo: Scalar); m34: ((anArray at: 12) castTo: Scalar);
		m41: ((anArray at: 13) castTo: Scalar); m42: ((anArray at: 14) castTo: Scalar); m43: ((anArray at: 15) castTo: Scalar); m44: ((anArray at: 16) castTo: Scalar);
		yourself
].

}.

WMMatrix4 class category: 'special matrices' methods: {
:[identity -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: 1.0; m22: 1.0; m33: 1.0; m44: 1.0;
		yourself
].

:[mat3: <WMMatrix3> mat3-> WMMatrix4.
	^ WMMatrix4 newValue
		m11: mat3 m11; m12: mat3 m12; m13: mat3 m13;
		m21: mat3 m21; m22: mat3 m22; m23: mat3 m23;
		m31: mat3 m31; m32: mat3 m32; m33: mat3 m33;
		m44: 1.0;
		yourself
].

:[mat3: <WMMatrix3> mat3 translation: <WMVector3> vector -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: mat3 m11; m12: mat3 m12; m13: mat3 m13; m14: vector x;
		m21: mat3 m21; m22: mat3 m22; m23: mat3 m23; m24: vector y;
		m31: mat3 m31; m32: mat3 m32; m33: mat3 m33; m34: vector z;
		m44: 1.0;
		yourself
].

:[mat3: <WMMatrix3> mat3 translation4: <WMVector4> vector4 -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: mat3 m11; m12: mat3 m12; m13: mat3 m13; m14: vector4 x;
		m21: mat3 m21; m22: mat3 m22; m23: mat3 m23; m24: vector4 y;
		m31: mat3 m31; m32: mat3 m32; m33: mat3 m33; m34: vector4 z;
		m44: vector4 w;
		yourself
].

:[ones -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: 1.0; m12: 1.0; m13: 1.0; m14: 1.0;
		m21: 1.0; m22: 1.0; m23: 1.0; m24: 1.0;
		m31: 1.0; m32: 1.0; m33: 1.0; m34: 1.0;
		m41: 1.0; m42: 1.0; m43: 1.0; m44: 1.0;
		yourself
].

:[scale: <Scalar> s -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: s; m22: s; m33: s; m44: 1.0;
		yourself
].

:[scaleX: <Scalar> sx y: <Scalar> sy z: <Scalar> sz -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: sx; m22: sy; m33: sz; m44: 1.0;
		yourself
].

:[zeros -> WMMatrix4.
	^ WMMatrix4 newValue

].
}.

WMMatrix4 class category: 'projection matrices' methods: {
:[frustumLeft: <Scalar> left right: <Scalar> right
	bottom: <Scalar> bottom top: <Scalar> top
	near: <Scalar> near far: <Scalar> far
	invertedY: <BooleanBit> invertedY ->WMMatrix4.

	let twoNear := 2.0 * near.
	let result := WMMatrix4 newValue.
	result
		m11: twoNear / (right - left); m13: ((right + left) / (right - left));
		m22: twoNear / (top - bottom); m23: ((top + bottom) / (top - bottom));
		m33: far negated / (far - near); m34: ((near * far) negated / (far - near));
		m43: -1.0.
	invertedY ifTrue: [ 
		result m22: result m22 negated; m23: result m23 negated.
	].

	^ result
].

:[orthoLeft: <Scalar> left right: <Scalar> right
	bottom: <Scalar> bottom top: <Scalar> top
	near: <Scalar> near far: <Scalar> far
	invertedY: <BooleanBit> invertedY -> WMMatrix4.
	let result := WMMatrix4 newValue.
	result
		m11: 2.0 / (right - left); m14: ((right + left) / (right - left)) negated;
		m22: 2.0 / (top - bottom); m24: ((top + bottom) / (top - bottom)) negated;
		m33: -1.0 / (far - near); m34: ((near) / (far - near)) negated;
		m44: 1.0.
	invertedY ifTrue: [ 
		result m22: result m22 negated; m24: result m24 negated.
	].

	^ result
].

:[perspectiveFovY: <Scalar> fovy aspect: <Scalar> aspect near: <Scalar> near far: <Scalar> far invertedY: <BooleanBit> invertedY -> WMMatrix4.
	let fovyRad := fovy degreesToRadians * 0.5 castTo: Scalar.
	let top := near * fovyRad tan castTo: Scalar.
	let right := top * aspect castTo: Scalar.
	^ WMMatrix4 frustumLeft: right negated right: right bottom: top negated top: top near: near far: far invertedY: invertedY
].

:[reverseDepthFrustumLeft: <Scalar> left right: <Scalar> right
	bottom: <Scalar> bottom top: <Scalar> top
	near: <Scalar> near far: <Scalar> far
	invertedY: <BooleanBit> invertedY -> WMMatrix4.
	let twoNear := 2.0 * near.
	let result := WMMatrix4 newValue.
	result
		m11: twoNear / (right - left); m13: ((right + left) / (right - left));
		m22: twoNear / (top - bottom); m23: ((top + bottom) / (top - bottom));
		m33: near / (far - near); m34: ((near * far) / (far - near));
		m43: -1.0.
	invertedY ifTrue: [ 
		result m22: result m22 negated; m23: result m23 negated.
	].

	^ result
].

:[reverseDepthOrthoLeft: <Scalar> left right: <Scalar> right
	bottom: <Scalar> bottom top: <Scalar> top
	near: <Scalar> near far: <Scalar> far
	invertedY: <BooleanBit> invertedY -> WMMatrix4.
	let result := WMMatrix4 newValue.
	result
		m11: 2.0 / (right - left); m14: ((right + left) / (right - left)) negated;
		m22: 2.0 / (top - bottom); m24: ((top + bottom) / (top - bottom)) negated;
		m33: 1.0 / (far - near); m34: ((far) / (far - near));
		m44: 1.0.
	invertedY ifTrue: [ 
		result m22: result m22 negated; m24: result m24 negated.
	].

	^ result
].

:[reverseDepthPerspectiveFovY: <Scalar> fovy aspect: <Scalar> aspect near: <Scalar> near far: <Scalar> far invertedY: <BooleanBit> invertedY -> WMMatrix4.
	let fovyRad := fovy degreesToRadians * 0.5 castTo: Scalar.
	let top := near * fovyRad tan castTo: Scalar.
	let right := top * aspect castTo: Scalar.
	^ self reverseDepthFrustumLeft: right negated right: right bottom: top negated top: top near: near far: far invertedY: invertedY
].

}.

WMMatrix4 category: 'arithmetic' methods: {
:[+ <WMMatrix4> other -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: m11 + other m11; m12: m12 + other m12; m13: m13 + other m13; m14: m14 + other m14;
		m21: m21 + other m21; m22: m22 + other m22; m23: m23 + other m23; m24: m24 + other m24;
		m31: m31 + other m31; m32: m32 + other m32; m33: m33 + other m33; m34: m34 + other m34;
		m41: m41 + other m41; m42: m42 + other m42; m43: m43 + other m43; m44: m44 + other m44;
		yourself
].

:[- <WMMatrix4> other -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: m11 - other m11; m12: m12 - other m12; m13: m13 - other m13; m14: m14 - other m14;
		m21: m21 - other m21; m22: m22 - other m22; m23: m23 - other m23; m24: m24 - other m24;
		m31: m31 - other m31; m32: m32 - other m32; m33: m33 - other m33; m34: m34 - other m34;
		m41: m41 - other m41; m42: m42 - other m42; m43: m43 - other m43; m44: m44 - other m44;
		yourself
].

:[* <WMMatrix4> other -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: (m11 * other m11) + (m12 * other m21) + (m13 * other m31) + (m14 * other m41);
		m12: (m11 * other m12) + (m12 * other m22) + (m13 * other m32) + (m14 * other m42);
		m13: (m11 * other m13) + (m12 * other m23) + (m13 * other m33) + (m14 * other m43);
		m14: (m11 * other m14) + (m12 * other m24) + (m13 * other m34) + (m14 * other m44);
		
		m21: (m21 * other m11) + (m22 * other m21) + (m23 * other m31) + (m24 * other m41);
		m22: (m21 * other m12) + (m22 * other m22) + (m23 * other m32) + (m24 * other m42);
		m23: (m21 * other m13) + (m22 * other m23) + (m23 * other m33) + (m24 * other m43);
		m24: (m21 * other m14) + (m22 * other m24) + (m23 * other m34) + (m24 * other m44);
		
		m31: (m31 * other m11) + (m32 * other m21) + (m33 * other m31) + (m34 * other m41);
		m32: (m31 * other m12) + (m32 * other m22) + (m33 * other m32) + (m34 * other m42);
		m33: (m31 * other m13) + (m32 * other m23) + (m33 * other m33) + (m34 * other m43);
		m34: (m31 * other m14) + (m32 * other m24) + (m33 * other m34) + (m34 * other m44);
		
		m41: (m41 * other m11) + (m42 * other m21) + (m43 * other m31) + (m44 * other m41);
		m42: (m41 * other m12) + (m42 * other m22) + (m43 * other m32) + (m44 * other m42);
		m43: (m41 * other m13) + (m42 * other m23) + (m43 * other m33) + (m44 * other m43);
		m44: (m41 * other m14) + (m42 * other m24) + (m43 * other m34) + (m44 * other m44);
		yourself
].

:[transposed -> WMMatrix4.
	^ WMMatrix4 newValue
		m11: m11; m12: m21; m13: m31; m14: m41;
		m21: m12; m22: m22; m23: m32; m24: m42;
		m31: m13; m32: m23; m33: m33; m34: m43;
		m41: m14; m42: m24; m43: m34; m44: m44;
		yourself
].
}.

WMMatrix4 category: 'comparing' methods: {
:[= other -> BooleanBit.
	WMMatrix4 == other class ifFalse: [ ^ false ].
	
	m11 = other m11 ifFalse: [ ^ false ].  
	m12 = other m12 ifFalse: [ ^ false ].  
	m13 = other m13 ifFalse: [ ^ false ].  
	m14 = other m14 ifFalse: [ ^ false ].  

	m21 = other m21 ifFalse: [ ^ false ].  
	m22 = other m22 ifFalse: [ ^ false ].  
	m23 = other m23 ifFalse: [ ^ false ].  
	m24 = other m24 ifFalse: [ ^ false ].  

	m31 = other m31 ifFalse: [ ^ false ].  
	m32 = other m32 ifFalse: [ ^ false ].  
	m33 = other m33 ifFalse: [ ^ false ].  
	m34 = other m34 ifFalse: [ ^ false ].  

	m41 = other m41 ifFalse: [ ^ false ].  
	m42 = other m42 ifFalse: [ ^ false ].  
	m43 = other m43 ifFalse: [ ^ false ].  
	m44 = other m44 ifFalse: [ ^ false ].  
	
	^ true
].

:[closeTo: other -> BooleanBit.
	(m11 closeTo: other m11) ifFalse: [ ^ false ].
	(m12 closeTo: other m12) ifFalse: [ ^ false ].
	(m13 closeTo: other m13) ifFalse: [ ^ false ].
	(m14 closeTo: other m14) ifFalse: [ ^ false ].

	(m21 closeTo: other m21) ifFalse: [ ^ false ].
	(m22 closeTo: other m22) ifFalse: [ ^ false ].
	(m23 closeTo: other m23) ifFalse: [ ^ false ].
	(m24 closeTo: other m24) ifFalse: [ ^ false ].

	(m31 closeTo: other m31) ifFalse: [ ^ false ].
	(m32 closeTo: other m32) ifFalse: [ ^ false ].
	(m33 closeTo: other m33) ifFalse: [ ^ false ].
	(m34 closeTo: other m34) ifFalse: [ ^ false ].
	
	(m41 closeTo: other m41) ifFalse: [ ^ false ].
	(m42 closeTo: other m42) ifFalse: [ ^ false ].
	(m43 closeTo: other m43) ifFalse: [ ^ false ].
	(m44 closeTo: other m44) ifFalse: [ ^ false ].

	^ true
].

:[hash -> _DynamicObject.
	^ WMMatrix4 identityHash bitXor:
		( m11 hash bitXor:
		( m12 hash bitXor:
		( m13 hash bitXor:
		( m14 hash bitXor:
		
		( m21 hash bitXor:
		( m22 hash bitXor:
		( m23 hash bitXor:
		( m24 hash bitXor:
		
		( m31 hash bitXor:
		( m32 hash bitXor:
		( m33 hash bitXor:
		( m34 hash bitXor:
		
		( m41 hash bitXor:
		( m42 hash bitXor:
		( m43 hash bitXor:
		( m44 hash))))))))))))))))

].
}.

WMMatrix4 category: 'converting' methods: {
:[asColumnMajorFloatArray -> _DynamicObject.
	| result |
	result := FloatArray new: 16.
	result
		at: 1 put: m11;
		at: 2 put: m21;
		at: 3 put: m31;
		at: 4 put: m41;
		
		at: 5 put: m12;
		at: 6 put: m22;
		at: 7 put: m32;
		at: 8 put: m42;
		
		at: 9 put: m13;
		at: 10 put: m23;
		at: 11 put: m33;
		at: 12 put: m43;
		
		at: 13 put: m14;
		at: 14 put: m24;
		at: 15 put: m34;
		at: 16 put: m44.
	^ result
].

:[asRowMajorFloatArray -> _DynamicObject.
	| result |
	result := FloatArray new: 16.
	result
		at: 1 put: m11;
		at: 2 put: m12;
		at: 3 put: m13;
		at: 4 put: m14;
		
		at: 5 put: m21;
		at: 6 put: m22;
		at: 7 put: m23;
		at: 8 put: m24;
		
		at: 9 put: m31;
		at: 10 put: m32;
		at: 11 put: m33;
		at: 12 put: m34;
		
		at: 13 put: m41;
		at: 14 put: m42;
		at: 15 put: m43;
		at: 16 put: m44.
	^ result
].

}.

WMMatrix4 category: 'printing' methods: {
:[printOn: aStream
	aStream nextPutAll: WMMatrix4 name; nextPutAll: ' newFrom: #('; cr;
		tab; print: m11; space; print: m12; space; print: m13; space; print: m14; cr;
		tab; print: m21; space; print: m22; space; print: m23; space; print: m24; cr;
		tab; print: m31; space; print: m32; space; print: m33; space; print: m34; cr;
		tab; print: m41; space; print: m42; space; print: m43; space; print: m44; cr;
		nextPut: $)
]
}.

WMMatrix4 category: 'transformations' methods: {
:[transformPosition3: <WMVector3>vector -> WMVector3.
	^ WMVector3
		x: (m11 * vector x) + (m12 * vector y) + (m13 * vector z) + m14
		y: (m21 * vector x) + (m22 * vector y) + (m23 * vector z) + m24
		z: (m31 * vector x) + (m32 * vector y) + (m33 * vector z) + m34
].

:[transformVector3: <WMVector3>vector -> WMVector3.
	^ WMVector3
		x: (m11 * vector x) + (m12 * vector y) + (m13 * vector z)
		y: (m21 * vector x) + (m22 * vector y) + (m23 * vector z)
		z: (m31 * vector x) + (m32 * vector y) + (m33 * vector z)
].

:[transformVector4: <WMVector4>vector -> WMVector4.
	^ WMVector4
		x: (m11 * vector x) + (m12 * vector y) + (m13 * vector z) + (m14 * vector w)
		y: (m21 * vector x) + (m22 * vector y) + (m23 * vector z) + (m24 * vector w)
		z: (m31 * vector x) + (m32 * vector y) + (m33 * vector z) + (m34 * vector w)
		w: (m41 * vector x) + (m42 * vector y) + (m43 * vector z) + (m44 * vector w)
].

:[transposedTransformVector3: <WMVector3>vector3 -> WMVector3.
	^ WMVector3
		x: (m11 * vector3 x) + (m21 * vector3 y) + (m31 * vector3 z) 
		y: (m12 * vector3 x) + (m22 * vector3 y) + (m32 * vector3 z) 
		z: (m13 * vector3 x) + (m23 * vector3 y) + (m33 * vector3 z)
]
}.
