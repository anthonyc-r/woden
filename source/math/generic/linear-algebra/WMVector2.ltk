WMVector2 class category: 'construction' methods: {
:[x: <Scalar>x -> WMVector2.
	^ WMVector2 newValue
		x: x;
		yourself
].

:[y: <Scalar>y -> WMVector2.
	^ WMVector2 newValue
		y: y;
		yourself
].

:[x: <Scalar>x y: <Scalar>y -> WMVector2.
	^ WMVector2 newValue
		x: x;
		y: y;
		yourself
].

:[infinity -> WMVector2.
	let v := Float infinity castTo: Scalar.
	^ WMVector2 x: v y: v
].

:[negativeInfinity -> WMVector2.
	let v := Float negativeInfinity castTo: Scalar.
	^ WMVector2 x: v y: v
].

}.

WMVector2 class category: 'serialization' methods: {
:[loadFromJson: data -> WMVector2.
	^ WMVector2 x: ((data at: 1) castTo: Scalar) y: ((data at: 2) castTo: Scalar)
].
}.

WMVector2 category: 'arithmetic' methods: {
:[+ <WMVector2> other -> WMVector2.
	^ WMVector2 x: x + other x y: y + other y
].

:[- <WMVector2> other -> WMVector2.
	^ WMVector2 x: x - other x y: y - other y
].

:[* other -> WMVector2.
	^ other isNumber ifTrue: [
		self scale: (other castTo: Scalar)
	] ifFalse: [
		self multiplyWithVector: (other castTo: WMVector2)
	]
].

:[scale: <Scalar> scalar -> WMVector2.
	^ WMVector2 x: x * scalar y: y * scalar
].

:[multiplyWithVector: <WMVector2> other -> WMVector2.
	^ WMVector2 x: x * other x y: y * other y
].

:[/ other -> WMVector2.
	^ other isNumber ifTrue: [
		self inverseScale: (other castTo: Scalar)
	] ifFalse: [
		self divideWithVector: (other castTo: WMVector2)
	]
].

:[inverseScale: <Scalar> scalar -> WMVector2.
	^ WMVector2 x: x / scalar y: y / scalar
].

:[divideWithVector: <WMVector2> other -> WMVector2.
	^ WMVector2 x: x / other x y: y / other y
].

:[cross: <WMVector2> other -> Scalar.
	^ (x * other y) - (y * other x)
].

:[dot: <WMVector2> other -> Scalar.
	^ (x * other x) + (y * other y)
].

:[length2 -> Scalar.
	^ (x * x) + (y * y)
].

:[length -> Scalar.
	^ ((x * x) + (y * y)) sqrt
].

:[negated -> WMVector2.
	^ WMVector2 x: x negated y: y negated
].

:[normalized -> WMVector2.
	let l := self length.
	^ l > 0.00001 ifTrue: [
		WMVector2 x: x / l y: y / l
	] ifFalse: [
		WMVector2 newValue
	]
].

}.

WMVector2 category: 'comparing' methods: {
:[= other -> BooleanBit.
	^ WMVector2 == other class and: [x = other x and: [y = other y]]
].

:[hash -> _DynamicObject.
	^ x hash bitXor: y hash
].

:[closeTo: <WMVector2> other -> BooleanBit.
	^ (x closeTo: other x) and: [y closeTo: other y]
].
}.

WMVector2 category: 'converting' methods: {
:[asJsonData -> _DynamicObject.
	^ { x . y }
].

:[asWMComplex -> WMComplex.
	^ WMComplex x: x y: y
].

:[asWMVector2 -> WMVector2.
	^ self
].

:[asWMVector2F -> WMVector2F.
	^ WMVector2F x: (x castTo: Float32) y: (y castTo: Float32)
].

:[asWMVector2D -> WMVector2D.
	^ WMVector2D x: x y: y
].
}.

WMVector2 category: 'printing' methods: {
:[printOn: aStream
	aStream nextPutAll: WMVector2 name;
		nextPutAll: ' x: '; print: x;
		nextPutAll: ' y: '; print: y.
].
}.
