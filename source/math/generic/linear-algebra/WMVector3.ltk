WMVector3 class category: 'construction' methods: {
:[x: <Scalar>x -> WMVector3.
	<constructor>
	^ WMVector3 newValue
		x: x;
		yourself
].

:[y: <Scalar>y -> WMVector3.
	<constructor>
	^ WMVector3 newValue
		y: y;
		yourself
].

:[z: <Scalar>z -> WMVector3.
	<constructor>
	^ WMVector3 newValue
		z: z;
		yourself
].

:[x: <Scalar>x y: <Scalar>y -> WMVector3.
	<constructor>
	^ WMVector3 newValue
		x: x;
		y: y;
		yourself
].

:[x: <Scalar>x z: <Scalar>z -> WMVector3.
	<constructor>
	^ WMVector3 newValue
		x: x;
		z: z;
		yourself
].

:[y: <Scalar>y z: <Scalar>z -> WMVector3.
	<constructor>
	^ WMVector3 newValue
		y: y;
		z: z;
		yourself
].

:[x: <Scalar>x y: <Scalar>y z: <Scalar>z -> WMVector3.
	<constructor>
    <inline>
	^ WMVector3 newValue
		x: x;
		y: y;
		z: z;
		yourself
].

:[infinity -> WMVector3.
	let v := Float infinity castTo: Scalar.
	^ WMVector3 x: v y: v z: v
].

:[negativeInfinity -> WMVector3.
	let v := Float negativeInfinity castTo: Scalar.
	^ WMVector3 x: v y: v z: v
].

:[zero -> WMVector3.
	^ WMVector3 newValue
].
}.

WMVector3 class category: 'serialization' methods: {
:[loadFromJson: data -> WMVector3.
	^ WMVector3 x: ((data at: 1) castTo: Scalar) y: ((data at: 2) castTo: Scalar) z: ((data at: 3) castTo: Scalar)
].
}.

WMVector3 category: 'accessing' methods: {
:[set: <WMVector3> other
	x := other x.
	y := other y.
	z := other z.
]
}.

WMVector3 category: 'arithmetic' methods: {
:[+ <WMVector3> other -> WMVector3.
    <inline>
	^ WMVector3 x: x + other x y: y + other y z: z + other z
].

:[- <WMVector3> other -> WMVector3.
    <inline>
	^ WMVector3 x: x - other x y: y - other y z: z - other z
].

:[* other -> WMVector3.
	^ other isNumber ifTrue: [
		self scale: (other castTo: Scalar)
	] ifFalse: [
		self multiplyWithVector: (other castTo: WMVector3)
	]
].

:[scale: <Scalar> scalar -> WMVector3.
    <inline>
	^ WMVector3 x: x * scalar y: y * scalar z: z * scalar
].

:[multiplyWithVector: <WMVector3> other -> WMVector3.
    <inline>
	^ WMVector3 x: x * other x y: y * other y z: z * other z
].

:[/ other -> WMVector3.
	^ other isNumber ifTrue: [
		self inverseScale: (other castTo: Scalar)
	] ifFalse: [
		self divideWithVector: (other castTo: WMVector3)
	]
].

:[inverseScale: <Scalar> scalar -> WMVector3.
    <inline>
	^ WMVector3 x: x / scalar y: y / scalar z: z / scalar
].

:[divideWithVector: <WMVector3> other -> WMVector3.
    <inline>
	^ WMVector3 x: x / other x y: y / other y z: z / other z
].

:[dot: <WMVector3> other -> Scalar.
    <inline>
	^ (x * other x) + (y * other y) + (z * other z)
].

:[cross: <WMVector3> other -> WMVector3.
    <inline>
	^ WMVector3
		x: (y * other z) - (z * other y)
		y: (z * other x) - (x * other z)
		z: (x * other y) - (y * other x)
].

:[length2 -> Scalar.
    <inline>
	^ (x * x) + (y * y) + (z * z)
].

:[length -> Scalar.
    <inline>
	^ ((x * x) + (y * y) + (z * z)) sqrt
].

:[negated -> WMVector3.
    <inline>
	^ WMVector3 x: x negated y: y negated z: z negated
].

:[normalized -> WMVector3.
    <inline>
	let l := self length.
	^ l > 0.00001 ifTrue: [
		WMVector3 x: x / l y: y / l z: z / l
	] ifFalse: [
		WMVector3 newValue
	]
].

:[reciprocalFloatQuiet -> WMVector3.
    <inline>
	^ WMVector3
		x: (x reciprocalFloatQuiet castTo: Scalar)
		y: (y reciprocalFloatQuiet castTo: Scalar)
		z: (z reciprocalFloatQuiet castTo: Scalar)
].

}.

WMVector3 category: 'comparing' methods: {
:[= other -> BooleanBit.
	^ WMVector3 == other class and: [x = other x and: [y = other y and: [z = other z]]]
].

:[hash -> _DynamicObject.
	^ (x hash bitXor: y hash) bitXor: z hash
].

:[closeTo: <WMVector3> other -> BooleanBit.
	^ (x closeTo: other x) and: [(y closeTo: other y) and: [z closeTo: other z]]
].
}.

WMVector3 category: 'converting' methods: {
:[asJsonData -> _DynamicObject.
	^ { x . y . z }
].

:[asWMVector3 -> WMVector3.
    <inline>
	^ self
].

:[asWMVector3D -> WMVector3D.
    <inline>
	^ WMVector3D x: x y: y z: z
].

:[asWMVector3F -> WMVector3F.
    <inline>
	^ WMVector3F x: (x castTo: Float32) y: (y castTo: Float32) z: (z castTo: Float32)
].

:[asWMVector4 -> WMVector4.
    <inline>
	^ WMVector4 x: x y: y z: z w: 0.0
].

:[asWMVector4D -> WMVector4D.
    <inline>
	^ WMVector4D x: x y: y z: z w: 0.0
].

:[asWMVector4F -> WMVector4F.
    <inline>
	^ WMVector4F x: (x castTo: Float32) y: (y castTo: Float32) z: (z castTo: Float32) w: 0.0
].

:[asColor -> _DynamicObject.
	^ Color r: x encodeSRGBComponent g: y encodeSRGBComponent b: z encodeSRGBComponent
].

:[asVisualizationColor -> _DynamicObject.
	^ self asColor
].
}.

WMVector3 category: 'math functions' methods: {
:[interpolateTo: <WMVector3> other at: <Scalar> param -> WMVector3.
	^ self * (1 - param) + (other * param)
].
}.

WMVector3 category: 'printing' methods: {
:[printOn: aStream
	aStream nextPutAll: WMVector3 name;
		nextPutAll: ' x: '; print: x;
		nextPutAll: ' y: '; print: y;
		nextPutAll: ' z: '; print: z.
].

:[formatAsDastrelColor -> _DynamicObject.
	^ 'float4({1}f, {2}f, {3}f, 1.0f)' format: {
		x asFloat.
		y asFloat.
		z asFloat.
	}
].
}.
