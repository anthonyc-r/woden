WMRay class category: 'construction' methods: {
:[origin: <WMVector3> origin direction: <WMVector3> direction -> WMRay.
	^ WMRay newValue
		origin: origin direction: direction;
		yourself
].

}.

WMRay category: 'initialization' methods: {
:[origin: <WMVector3> newOrigin direction: <WMVector3> newDirection
	origin := newOrigin.
	direction := newDirection.
	invertedDirection := direction reciprocalFloatQuiet.	
	signs x := (invertedDirection x < 0.0) asBit castTo: Int16.
	signs y := (invertedDirection y < 0.0) asBit castTo: Int16.
	signs z := (invertedDirection z < 0.0) asBit castTo: Int16.
].

}.

WMRay category: 'evaluating' methods: {
:[pointAtDistance: distance -> _DynamicObject.
	(distance isNil or: [distance < 0.0]) ifTrue: [ ^ nil ].
	^ origin + (direction * distance)
].

}.

WMRay category: 'intersection' methods: {
:[intersectWithBox: <WMBox3D> box -> _DynamicObject.
	"This method computes a ray box intersection. It should be a point."
	^ self pointAtDistance: (self intersectionDistanceWithBox: box).
].

:[intersectWithPlane: <WMPlane> plane -> _DynamicObject.
	"This method computes a ray box intersection. It should be a point."
	^ self pointAtDistance: (self intersectionDistanceWithPlane: plane).
].

:[intersectionDistanceWithBox: <WMBox3D> box -> _DynamicObject.
	"Algorithm taken from paper
	An Efficient and Robust Rayâ€“Box Intersection Algorithm. Written by A. Williams et al.
	Available at: http://www.cs.utah.edu/~awilliam/box/
	"
	let txmin := ((box boundsAtSign: signs x) x - (origin x)) * invertedDirection x.
	let txmax := ((box boundsAtSign: 1 - signs x) x - (origin x)) * invertedDirection x.
	let tymin := ((box boundsAtSign: signs y) y - (origin y)) * invertedDirection y.
	let tymax := ((box boundsAtSign: 1 - signs y) y - (origin y)) * invertedDirection y.
	
	(txmin > tymax or: [ tymin > txmax ]) ifTrue: [ ^ nil ].
	tymin > txmin ifTrue: [ txmin := tymin ].
	tymax < txmax ifTrue: [ txmax := tymax ].
	
	let tzmin := ((box boundsAtSign: signs z) z - (origin z)) * invertedDirection z.
	let tzmax := ((box boundsAtSign: 1 - signs z) z - (origin z)) * invertedDirection z.
	
	(txmin > tzmax or: [ tzmin > txmax ]) ifTrue: [ ^ nil ].
	tzmin > txmin ifTrue: [ txmin := tzmin ].
	tzmax < txmax ifTrue: [ txmax := tzmax ].
	
	^ txmax > 0.0 ifTrue: [ txmin ] ifFalse: [ nil ].
	
].

:[intersectionDistanceWithPlane: <WMPlane> plane -> _DynamicObject.
	"This method computes a ray plane intersection. It should be a point."
	let normal := plane normal.
	let det := direction dot: normal.
	(det closeTo: 0.0) ifTrue: [ ^ nil ].
	
	^ (plane distance - (normal dot: origin)) / det.	
].

:[testResultForDistance: distance value: value -> _DynamicObject.
	^ WMRayIntersectionTestResult new distance: distance; value: value
]
}.

WMRay category: 'transformations' methods: {
:[transformedWith: <WMReversibleAffineTransform> transform -> WMRay.
	^ WMRay origin: (transform transformPosition3: origin) direction: (transform transformVector3: direction)
].

:[transformedWithInverseOf: <WMReversibleAffineTransform> transform -> WMRay.
	^ WMRay origin: (transform inverseTransformPosition3: origin) direction: (transform inverseTransformVector3: direction)
].
}.
