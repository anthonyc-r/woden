let WMBox2D := Structure <<< ('WMBox2D' , typeNameSuffix) asSymbol
	slots: {
		#min => WMVector2.
		#max => WMVector2.
	};
	package: 'WodenMath-Core-Geometry';
	yourself.

let WMBox3D := Structure <<< ('WMBox3D' , typeNameSuffix) asSymbol
	slots: {
		#min => WMVector3.
		#max => WMVector3.
	};
	package: 'WodenMath-Core-Geometry';
	yourself.

let WMFrustum := Class <<< ('WMFrustum' , typeNameSuffix) asSymbol
	slots: {
		#leftBottomNear .
		#rightBottomNear .
		#leftTopNear .
		#rightTopNear .
		#leftBottomFar .
		#rightBottomFar .
		#leftTopFar .
		#rightTopFar .
		#matrix .
	};
	package: 'WodenMath-Core-Geometry';
	yourself.

let WMPlane := Structure <<< ('WMPlane' , typeNameSuffix) asSymbol
	slots: {
		#nx => Scalar.
		#ny => Scalar .
		#nz => Scalar .
		#d => Scalar.
	};
	package: 'WodenMath-Core-Geometry';
	yourself.

let WMRay := Structure <<< ('WMRay' , typeNameSuffix) asSymbol
	slots: {
		#origin => WMVector3.
		#direction => WMVector3.
		#invertedDirection => WMVector3.
		#signs => WMVector3.
	};
	package: 'WodenMath-Core-Geometry';
	yourself.

let WMRayIntersectionTestResult := Class <<< ('WMRayIntersectionTestResult' , typeNameSuffix) asSymbol
	slots: {
		#priority .
		#distance .
		#value
	};
	package: 'WodenMath-Core-Geometry';
	yourself.

let WMSphere := Structure <<< ('WMSphere' , typeNameSuffix) asSymbol
	slots: {
		#center => WMVector3.
		#radius => Scalar.
	};
	package: 'WodenMath-Core-Geometry';
	yourself.

Compiler
	evaluateFileNamedInThisContext: 'WMBox2D.ltk';
	evaluateFileNamedInThisContext: 'WMBox3D.ltk';
	evaluateFileNamedInThisContext: 'WMFrustum.ltk';
	evaluateFileNamedInThisContext: 'WMPlane.ltk';
	evaluateFileNamedInThisContext: 'WMRay.ltk';
	evaluateFileNamedInThisContext: 'WMRayIntersectionTestResult.ltk';
	evaluateFileNamedInThisContext: 'WMSphere.ltk';
	yourself.
