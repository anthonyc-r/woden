WMComplex class category: 'construction' methods: {
:[x: <Scalar>x -> WMComplex.
	^ WMComplex newValue
		r: x;
		yourself
].

:[y: <Scalar>y -> WMComplex.
	^ WMComplex newValue
		i: y;
		yourself
].

:[x: <Scalar>x y: <Scalar>y -> WMComplex.
	^ WMComplex newValue
		r: x;
		i: y;
		yourself
].

:[r: <Scalar>r -> WMComplex.
	^ WMComplex newValue
		r: r;
		yourself
].

:[i: <Scalar>i -> WMComplex.
	^ WMComplex newValue
		i: i;
		yourself
].

:[r: <Scalar>r i: <Scalar>i -> WMComplex.
	^ WMComplex newValue
		r: r;
		i: i;
		yourself
].

:[angle: <Scalar>angle -> WMComplex.
	^ WMComplex newValue
		r: (angle cos castTo: Scalar);
		i: (angle sin castTo: Scalar);
		yourself
].

:[radius: <Scalar> radius angle: <Scalar>angle -> WMComplex.
	^ WMComplex newValue
		r: radius * (angle cos castTo: Scalar);
		i: radius * (angle sin castTo: Scalar);
		yourself
].
}.

WMComplex category: 'accessing' methods: {
:[x -> Scalar.
	^ r
].

:[x: <Scalar> newX
	r := newX
].

:[y -> Scalar.
	^ i
].

:[y: <Scalar> newY
	i := newY
].
}.

WMComplex category: 'arithmetic' methods: {
:[+ <WMComplex> other -> WMComplex.
	^ WMComplex r: r + other r i: i + other i
].

:[- <WMComplex> other -> WMComplex.
	^ WMComplex r: r - other r i: i - other i
].

:[* other -> WMComplex.
	^ other isNumber ifTrue: [
		self scale: (other castTo: Scalar)
	] ifFalse: [
		self multiplyWithComplex: (other castTo: WMComplex)
	]
].

:[scale: <Scalar> scalar -> WMComplex.
	^ WMComplex r: r * scalar i: i * scalar
].

:[multiplyWithComplex: <WMComplex> other -> WMComplex.
	^ WMComplex r: (r * other r) - (i * other i) i: (r * other i) + (i * other r)
].

:[/ other -> WMComplex.
	^ other isNumber ifTrue: [
		self inverseScale: (other castTo: Scalar)
	] ifFalse: [
		self multiplyWithComplex: (other castTo: WMComplex) inverse
	]
].

:[inverseScale: <Scalar> scalar -> WMComplex.
	^ WMComplex r: r / scalar i: i / scalar
].

:[abs -> Scalar.
	^ self length
].

:[angle -> Scalar.
	^ (i arcTan: r) castTo: Scalar
].

:[conjugated -> WMComplex.
	^ WMComplex r: r i: i negated
].

:[inverse -> WMComplex.
	let l2 := self length2.
	^ WMComplex r: r / l2 i: i negated / l2
].

:[length2 -> Scalar.
	^ (r*r) + (i*i)
].

:[length -> Scalar.
	^ ((r*r) + (i*i)) sqrt
].

:[negated -> WMComplex.
	^ WMComplex r: r negated i: i negated
].

}.

WMComplex category: 'comparing' methods: {
:[= other -> BooleanBit.
	^ WMComplex == other class and: [r = other r and: [i = other i]]
].

:[hash -> _DynamicObject.
	^ r hash bitXor: i hash
].

:[closeTo: <WMComplex> other -> BooleanBit.
	^ (r closeTo: other r) and: [i closeTo: other i]
].
}.

WMComplex category: 'converting' methods: {
:[asWMComplex
	^ self
].

:[asWMComplexF -> WMComplexF.
	^ WMComplexF r: (r castTo: Float32) i: (i castTo: Float32)
].

:[asWMComplexD -> WMComplexD.
	^ WMComplexD r: r i: i
].

:[asWMVector2 -> WMVector2.
	^ WMVector2 x: r y: i
].

:[asWMVector2F -> WMVector2F.
	^ WMVector2F x: (r castTo: Float32) y: (i castTo: Float32)
].

:[asWMVector2D -> WMVector2D.
	^ WMVector2D x: r y: i
].
}.

WMComplex category: 'printing' methods: {
:[printOn: aStream
	aStream nextPutAll: WMComplex name;
		nextPutAll: ' r: '; print: r;
		nextPutAll: ' i: '; print: i.
].
}.