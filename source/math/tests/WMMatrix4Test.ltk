Class <<< #WMMatrix4Test
	superclass: TestCase;
	package: #'WodenMath-Tests';
	slots: {
		#matrix4Class.
		#vector3Class.
		#vector4Class.
		#matrix3Class.
	};
	yourself. 

WMMatrix4Test class category: #'as yet unclassified' methods: {
:[isAbstract
	^ self == WMMatrix4Test
].
}.

WMMatrix4Test category: #tests methods: {
:[testAccessors
	| m |
	m := matrix4Class new.
	m
		m11: 1.0; m12: 2.0; m13: 3.0; m14: 4.0;
		m21: 5.0; m22: 6.0; m23: 7.0; m24: 8.0;
		m31: 9.0; m32: 10.0; m33: 11.0; m34: 12.0;
		m41: 13.0; m42: 14.0; m43: 15.0; m44: 16.0.
	self assert: m m11 equals: 1.0.
	self assert: m m12 equals: 2.0.
	self assert: m m13 equals: 3.0.
	self assert: m m14 equals: 4.0.

	self assert: m m21 equals: 5.0.
	self assert: m m22 equals: 6.0.
	self assert: m m23 equals: 7.0.
	self assert: m m24 equals: 8.0.

	self assert: m m31 equals: 9.0.
	self assert: m m32 equals: 10.0.
	self assert: m m33 equals: 11.0.
	self assert: m m34 equals: 12.0.

	self assert: m m41 equals: 13.0.
	self assert: m m42 equals: 14.0.
	self assert: m m43 equals: 15.0.
	self assert: m m44 equals: 16.0.

].

:[testAdd
	| a b |
	a := matrix4Class ones.
	b := matrix4Class ones.
	
	self assert: (a + b) asRowMajorFloatArray equals: #(
		2.0 2.0 2.0 2.0
		2.0 2.0 2.0 2.0
		2.0 2.0 2.0 2.0
		2.0 2.0 2.0 2.0
	) asFloatArray
].

:[testEquals
	| a b c |
	a := matrix4Class ones.
	b := matrix4Class ones.
	c := matrix4Class zeros.
	self assert: a equals: b.
	self deny: a = c.
	self deny: b = c.
].

:[testHash
	| a b |
	a := matrix4Class ones.
	b := matrix4Class ones.
	self assert: a hash equals: b hash.
].

:[testIdentity
	| m |
	m := matrix4Class identity.
	self assert: m asRowMajorFloatArray equals: #(
		1.0 0.0 0.0 0.0
		0.0 1.0 0.0 0.0
		0.0 0.0 1.0 0.0
		0.0 0.0 0.0 1.0
	) asFloatArray
].

:[testMultiplyIdentity
	| a b |
	a := matrix4Class ones.
	b := matrix4Class identity.
	
	self assert: (a * b) asRowMajorFloatArray equals: #(
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
	) asFloatArray.
	self assert: (b * a) asRowMajorFloatArray equals: #(
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
	) asFloatArray.
].

:[testNew
	| m |
	m := matrix4Class new.
	self assert: m asRowMajorFloatArray equals: #(
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
	) asFloatArray
].

:[testOnes
	| m |
	m := matrix4Class ones.
	
	self assert: m asRowMajorFloatArray equals: #(
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
		1.0 1.0 1.0 1.0
	) asFloatArray
].

:[testSubtract
	| a b |
	a := matrix4Class ones.
	b := matrix4Class ones.
	
	self assert: (a - b) asRowMajorFloatArray equals: #(
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
	) asFloatArray
].

:[testZeros
	| m |
	m := matrix4Class zeros.
	
	self assert: m asRowMajorFloatArray equals: #(
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
		0.0 0.0 0.0 0.0
	) asFloatArray
].
}.

