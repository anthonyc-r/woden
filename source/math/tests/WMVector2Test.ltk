Class <<< #WMVector2Test
	superclass: TestCase;
	package: #'WodenMath-Tests';
	slots: {
		#vector2Class.
	};
	yourself. 

WMVector2Test class category: #'as yet unclassified' methods: {
:[isAbstract
	^ self == WMVector2Test
].
}.

WMVector2Test category: #tests methods: {
:[testAccessors
	| v |
	v := vector2Class new.
	v x: 1.0; y: 2.0.
	self assert: v x equals: 1.0.
	self assert: v y equals: 2.0.
].

:[testAdd
	| a b result |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 4.0 y: 7.0.
	result := vector2Class x: 5.0 y: 9.0.
	self assert: a + b equals: result
].

:[testCloseTo
	| a b c |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 3.0 y: 4.0.
	c := vector2Class x: 3.0 y: 4.0.
	self assert: (b closeTo: c).
	self deny: (a closeTo: b).
	self deny: (a closeTo: c).
	
].

:[testConstruct
	| v |
	v := vector2Class x: 1.0 y: 2.0.
	self assert: v x equals: 1.0.
	self assert: v y equals: 2.0.
].

:[testConstruct2
	| v |
	v := vector2Class x: 1.0.
	self assert: v x equals: 1.0.
	self assert: v y equals: 0.0.
].

:[testConstruct3
	| v |
	v := vector2Class y: 2.0.
	self assert: v x equals: 0.0.
	self assert: v y equals: 2.0.
].

:[testCross
	| a b |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 4.0 y: 7.0.
	self assert: (a cross: b) equals: 7.0 - 8.0
].

:[testDivide
	| a b result |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 4.0 y: 7.0.
	result := vector2Class x: 0.25 y: 2.0 / 7.0.
	self assert: (a / b closeTo: result)
].

:[testDivideScalar
	| a b result |
	a := vector2Class x: 1.0 y: 2.0.
	b := 2.0.
	result := vector2Class x: 0.5 y: 1.0.
	self assert: (a / b closeTo: result)
].

:[testDot
	| a b |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 4.0 y: 7.0.
	self assert: (a dot: b) equals: 4.0 + 14.0
].

:[testEquals
	| a b c |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 3.0 y: 4.0.
	c := vector2Class x: 3.0 y: 4.0.
	self assert: b equals:  c.
	self deny: a = b.
	self deny: a = c.
	
].

:[testHash
	| b c |
	b := vector2Class x: 3.0 y: 4.0.
	c := vector2Class x: 3.0 y: 4.0.
	self assert: b hash equals: c hash.
	
].

:[testLength
	| v |
	v := vector2Class x: 3.0 y: 4.0.
	self assert: v length equals: 5.0
].

:[testLength2
	| v |
	v := vector2Class x: 3.0 y: 4.0.
	self assert: v length2 equals: 25.0
].

:[testMultiply
	| a b result |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 4.0 y: 7.0.
	result := vector2Class x: 4.0 y: 14.0.
	self assert: a * b equals: result
].

:[testMultiplyScalar
	| a b result |
	a := vector2Class x: 1.0 y: 2.0.
	b := 3.0.
	result := vector2Class x: 3.0 y: 6.0.
	self assert: a * b equals: result
].

:[testNegated
	| a b result |
	a := vector2Class x: 1.0 y: 2.0.
	result := vector2Class x: -1.0 y: -2.0.
	self assert: a negated equals: result
].

:[testNew
	| v |
	v := vector2Class new.
	self assert: v x equals: 0.0.
	self assert: v y equals: 0.0.
].

:[testNormalized
	| a |
	a := vector2Class x: 1.0 y: 2.0.
	self assert: (a normalized length closeTo: 1.0)
].

:[testSubtract
	| a b result |
	a := vector2Class x: 1.0 y: 2.0.
	b := vector2Class x: 4.0 y: 7.0.
	result := vector2Class x: -3.0 y: -5.0.
	self assert: a - b equals: result
].
}.

