Class <<< #WMQuaternionTest
	superclass: TestCase;
	package: #'WodenMath-Tests';
	slots: {
		#quaternionClass.
		#vector3Class.
		#matrix3Class.
	};
	yourself. 

WMQuaternionTest class category: #testing methods: {
:[isAbstract
	^ self == WMQuaternionTest
].
}.

WMQuaternionTest category: #tests methods: {
:[testAbs
	| v |
	v := quaternionClass r: 2.0 i: 2.0 j: 2.0 k: 2.0.
	self assert: (v abs closeTo: 4.0)
].

:[testAccessors
	| z |
	z := quaternionClass new.
	z r: 1.0; i: 2.0; j: 3.0; k: 4.0.
	self assert: z r equals: 1.0.
	self assert: z w equals: 1.0.
	self assert: z i equals: 2.0.
	self assert: z x equals: 2.0.
	self assert: z j equals: 3.0.
	self assert: z y equals: 3.0.
	self assert: z k equals: 4.0.
	self assert: z z equals: 4.0.
	
].

:[testAccessors2
	| z |
	z := quaternionClass new.
	z w: 1.0; x: 2.0; y: 3.0; z: 4.0.
	self assert: z r equals: 1.0.
	self assert: z w equals: 1.0.
	self assert: z i equals: 2.0.
	self assert: z x equals: 2.0.
	self assert: z j equals: 3.0.
	self assert: z y equals: 3.0.
	self assert: z k equals: 4.0.
	self assert: z z equals: 4.0.
	
].

:[testAdd
	| a b result |
	a := quaternionClass r: 1.0 i: 2.0 j: 3.0 k: 4.0.
	b := quaternionClass r: 4.0 i: 7.0 j: 10.0 k: 12.0.
	result := quaternionClass r: 5.0 i: 9.0 j: 13.0 k: 16.0.
	self assert: a + b equals: result
].

:[testAsWMMatrix3
	self assert: (quaternionClass identity asWMMatrix3 closeTo: matrix3Class identity).
].

:[testConjugated
	| z zr |
	z := quaternionClass r: 3.0 i: 4.0 j: 5.0 k: 6.0.
	zr := quaternionClass r: 3.0 i: -4.0 j: -5.0 k: -6.0.
	self assert: z conjugated equals: zr
].

:[testConstructor
	| z |
	z := quaternionClass r: 1.0 i: 2.0 j: 3.0 k: 4.0.
	self assert: z r equals: 1.0.
	self assert: z w equals: 1.0.
	self assert: z i equals: 2.0.
	self assert: z x equals: 2.0.
	self assert: z j equals: 3.0.
	self assert: z y equals: 3.0.
	self assert: z k equals: 4.0.
	self assert: z z equals: 4.0.
].

:[testInverse
	| z zr |
	z := quaternionClass r: 3.0 i: 4.0 j: 5.0 k: 6.0.
	zr := quaternionClass r: 1.0.
	self assert: (z * z inverse closeTo: zr)
].

:[testLength
	| v |
	v := quaternionClass r: 2.0 i: 2.0 j: 2.0 k: 2.0.
	self assert: (v length closeTo: 4.0)
].

:[testLength2
	| v |
	v := quaternionClass r: 2.0 i: 2.0 j: 2.0 k: 2.0.
	self assert: v length2 equals: 16.0
].

:[testMultiplyScalar
	| a b result |
	a := quaternionClass r: 1.0 i: 2.0 j: 3.0 k: 4.0.
	b := 3.0.
	result := quaternionClass r: 3.0 i: 6.0 j: 9.0 k: 12.0.
	self assert: a * b equals: result
].

:[testNegated
	| z zr |
	z := quaternionClass r: 3.0 i: 4.0 j: 5.0 k: 6.0.
	zr := quaternionClass r: -3.0 i: -4.0 j: -5.0 k: -6.0.
	self assert: z negated equals: zr
].

:[testSub
	| a b result |
	a := quaternionClass r: 1.0 i: 2.0 j: 3.0 k: 4.0.
	b := quaternionClass r: 4.0 i: 7.0 j: 10.0 k: 12.0.
	result := quaternionClass r: -3.0 i: -5.0 j: -7.0 k: -8.0.
	self assert: a - b equals: result
].
}.

