Class <<< #WMComplexTest
	superclass: TestCase;
	package: #'WodenMath-Tests';
	slots: {
		#complexClass.
		#vector2Class.
	};
	yourself. 

WMComplexTest class category: #testing methods: {
:[isAbstract
	^ self == WMComplexTest
].
}.

WMComplexTest category: #tests methods: {
:[testAbs
	| z |
	z := complexClass r: 3.0 i: 4.0.
	self assert: (z abs closeTo: 5.0).
].

:[testAccessors
	| z |
	z := complexClass new.
	z r: 1.0; i: 2.0.
	self assert: z r equals: 1.0.
	self assert: z x equals: 1.0.
	self assert: z i equals: 2.0.
	self assert: z y equals: 2.0.
].

:[testAdd
	| z1 z2 zr |
	z1 := complexClass r: 1.0 i: 2.0.
	z2 := complexClass r: 3.0 i: 4.0.
	zr := complexClass r: 4.0 i: 6.0.
	self assert: z1 + z2 equals: zr.
].

:[testConjugated
	| z zr |
	z := complexClass r: 3.0 i: 4.0.
	zr := complexClass r: 3.0 i: -4.0.
	self assert: z conjugated equals: zr
].

:[testConstructor
	| z |
	z := complexClass r: 1.0 i: 2.0.
	self assert: z r equals: 1.0.
	self assert: z x equals: 1.0.
	self assert: z i equals: 2.0.
	self assert: z y equals: 2.0.
].

:[testConstructor2

	self assert: (complexClass r: 1.0) equals: (complexClass r: 1.0 i: 0.0).
	self assert: (complexClass i: 1.0) equals: (complexClass r: 0.0 i: 1.0).
	
].

:[testConverting
	| z |
	z := (complexClass r: 1.0 i: 2.0) asWMComplex .
	self assert: z r equals: 1.0.
	self assert: z i equals: 2.0.
].

:[testConvertingF
	| z |
	z := (complexClass r: 1.0 i: 2.0) asWMComplexF. 
	self assert: z class equals: WMComplexF.
	self assert: z r equals: 1.0.
	self assert: z i equals: 2.0.
].

:[testEquals
	| z1 z2 z3 |
	z1 := complexClass r: 1.0 i: 2.0.
	z2 := complexClass r: 1.0 i: 2.0.
	z3 := complexClass r: -1.0 i: 2.0.
	self assert: z1 equals: z2.
	self deny: z1 = z3.
	self deny: z2 = z3.
].

:[testHash
	| z1 z2 |
	z1 := complexClass r: 1.0 i: 2.0.
	z2 := complexClass r: 1.0 i: 2.0.
	self assert: z1 hash equals: z2 hash.
].

:[testInverse
	| z zr |
	z := complexClass r: 3.0 i: 4.0.
	zr := complexClass r: 1.0.
	self assert: (z * z inverse closeTo: zr)
].

:[testLength
	| z |
	z := complexClass r: 3.0 i: 4.0.
	self assert: (z length closeTo: 5.0).
].

:[testLength2
	| z |
	z := complexClass r: 3.0 i: 4.0.
	self assert: z length2 equals: 25.0
].

:[testMultiply
	| z1 z2 zr |
	z1 := complexClass r: 1.0 i: 2.0.
	z2 := complexClass r: 3.0 i: 4.0.
	zr := complexClass r: -5.0i: 10.0.
	self assert: z1 * z2 equals: zr.
].

:[testMultiplyScale
	| z1 z2 zr |
	z1 := complexClass r: 1.0 i: 2.0.
	z2 := 3.0.
	zr := complexClass r: 3.0i: 6.0.
	self assert: z1 * z2 equals: zr.
].

:[testNegated
	| z zr |
	z := complexClass r: 3.0 i: 4.0.
	zr := complexClass r: -3.0 i: -4.0.
	self assert: z negated equals: zr
].

:[testSubtract
	| z1 z2 zr |
	z1 := complexClass r: 1.0 i: 2.0.
	z2 := complexClass r: 3.0 i: 4.0.
	zr := complexClass r: -2.0 i: -2.0.
	self assert: z1 - z2 equals: zr.
].
}.

