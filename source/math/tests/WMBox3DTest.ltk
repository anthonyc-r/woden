Class <<< #WMBox3DTest
	superclass: TestCase;
	package: #'WodenMath-Tests';
	slots: {
		#boxClass.
		#vector3Class.
	};
	yourself. 

WMBox3DTest class category: #'as yet unclassified' methods: {
:[isAbstract
	^ self == WMBox3DTest
].
}.

WMBox3DTest category: #tests methods: {
:[testAccessors
	| b |
	b := boxClass new.
	b
		min: (vector3Class x: -1.0 y: -2.0 z: -3.0);
		max: (vector3Class x: 1.0 y: 2.0 z: 3.0).
		
	self assert: b min x equals: -1.0.
	self assert: b min y equals: -2.0.
	self assert: b min z equals: -3.0.
	
	self assert: b max x equals: 1.0.
	self assert: b max y equals: 2.0.
	self assert: b max z equals: 3.0.
].

:[testCenter
	| box |
	box := boxClass nx: -1.0 ny: -2.0 nz: -3.0 px: 1.0 py: 2.0 pz: 3.0.
	self assert: box center equals: vector3Class new.
].

:[testCorners
	| box zeroPoint |
	box := boxClass nx: -1.0 ny: -1.0 nz: -1.0 px: 1.0 py: 1.0 pz: 1.0.
	zeroPoint := vector3Class new.
	self deny: box isEmpty.
	self assert: box min equals: (vector3Class x: -1.0 y: -1.0 z: -1.0).
	self assert: box max equals: (vector3Class x: 1.0 y: 1.0 z: 1.0).
	self assert: box nearBottomLeft equals: (vector3Class x: -1.0 y: -1.0 z: -1.0).
	self assert: box nearBottomRight equals: (vector3Class x: 1.0 y: -1.0 z: -1.0).
	self assert: box nearTopLeft equals: (vector3Class x: -1.0 y: 1.0 z: -1.0).
	self assert: box nearTopRight equals: (vector3Class x: 1.0 y: 1.0 z: -1.0).
	
	self assert: box farBottomLeft equals: (vector3Class x: -1.0 y: -1.0 z: 1.0).
	self assert: box farBottomRight equals: (vector3Class x: 1.0 y: -1.0 z: 1.0).
	self assert: box farTopLeft equals: (vector3Class x: -1.0 y: 1.0 z: 1.0).
	self assert: box farTopRight equals: (vector3Class x: 1.0 y: 1.0 z: 1.0).

].

:[testEmpty
	| box |
	box := boxClass empty.
	self assert: box isEmpty.
].

:[testExtent
	| box |
	box := boxClass nx: -1.0 ny: -2.0 nz: -3.0 px: 1.0 py: 2.0 pz: 3.0.
	self assert: box extent equals: (vector3Class x: 2.0 y: 4.0 z: 6.0).
].

:[testHalfExtent
	| box |
	box := boxClass nx: -1.0 ny: -2.0 nz: -3.0 px: 1.0 py: 2.0 pz: 3.0.
	self assert: box halfExtent equals: (vector3Class x: 1.0 y: 2.0 z: 3.0).
].

:[testInsertBox
	| box min max |
	min := vector3Class new.
	max := vector3Class x: 1.0 y: 1.0 z: 1.0.
	box := boxClass empty
		insertBox: (boxClass min: min max: max).
	self deny: box isEmpty.
	self assert: box min equals: min.
	self assert: box max equals: max.
].

:[testInsertPoint
	| box point |
	point := vector3Class new.
	box := boxClass empty insertPoint: point.
	self deny: box isEmpty.
	self assert: box min equals: point.
	self assert: box max equals: point.
].

:[testInsertPoint2
	| box min max |
	min := vector3Class new.
	max := vector3Class x: 1.0 y: 1.0 z: 1.0.
	box := boxClass empty
		insertPoint: min;
		insertPoint: max;
		yourself.
	self deny: box isEmpty.
	self assert: box min equals: min.
	self assert: box max equals: max.
].

:[testMakeEmpty
	| box |
	box := boxClass new.
	self deny: box isEmpty.
	box makeEmpty.
	self assert: box isEmpty.
].

:[testNew
	| box zeroPoint |
	box := boxClass new.
	zeroPoint := vector3Class new.
	self deny: box isEmpty.
	self assert: box min equals: zeroPoint.
	self assert: box max equals: zeroPoint.
].

:[testSize
	| box |
	box := boxClass nx: -1.0 ny: -2.0 nz: -3.0 px: 1.0 py: 2.0 pz: 3.0.
	self assert: box width equals: 2.0.
	self assert: box height equals: 4.0.
	self assert: box depth equals: 6.0.
].
}.

